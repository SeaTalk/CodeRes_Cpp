// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: caculator.proto

#include "caculator.pb.h"
#include "caculator.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace caculator {

static const char* Caculator_method_names[] = {
  "/caculator.Caculator/caculate",
};

std::unique_ptr< Caculator::Stub> Caculator::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Caculator::Stub> stub(new Caculator::Stub(channel));
  return stub;
}

Caculator::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_caculate_(Caculator_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Caculator::Stub::caculate(::grpc::ClientContext* context, const ::caculator::Request& request, ::caculator::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_caculate_, context, request, response);
}

void Caculator::Stub::experimental_async::caculate(::grpc::ClientContext* context, const ::caculator::Request* request, ::caculator::Response* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_caculate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::caculator::Response>* Caculator::Stub::AsynccaculateRaw(::grpc::ClientContext* context, const ::caculator::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::caculator::Response>::Create(channel_.get(), cq, rpcmethod_caculate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::caculator::Response>* Caculator::Stub::PrepareAsynccaculateRaw(::grpc::ClientContext* context, const ::caculator::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::caculator::Response>::Create(channel_.get(), cq, rpcmethod_caculate_, context, request, false);
}

Caculator::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Caculator_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Caculator::Service, ::caculator::Request, ::caculator::Response>(
          std::mem_fn(&Caculator::Service::caculate), this)));
}

Caculator::Service::~Service() {
}

::grpc::Status Caculator::Service::caculate(::grpc::ServerContext* context, const ::caculator::Request* request, ::caculator::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace caculator

