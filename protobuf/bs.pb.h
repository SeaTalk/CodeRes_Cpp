// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bs.proto

#ifndef PROTOBUF_bs_2eproto__INCLUDED
#define PROTOBUF_bs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bs_2eproto();
void protobuf_AssignDesc_bs_2eproto();
void protobuf_ShutdownFile_bs_2eproto();

class MapStruct;
class IndexQuery;
class IndexQuery_Filter;
class IndexQuery_Combiner;
class IndexQuery_Ranker;
class IndexQuery_FieldWeight;
class IndexQuery_GeoAnchor;
class IndexQueryReq;
class QueryResult;
class QueryResult_AttrMeta;
class QueryResult_Record;
class IndexDebugInfo;
class IndexQueryRes;

// ===================================================================

class MapStruct : public ::google::protobuf::Message {
 public:
  MapStruct();
  virtual ~MapStruct();

  MapStruct(const MapStruct& from);

  inline MapStruct& operator=(const MapStruct& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapStruct& default_instance();

  void Swap(MapStruct* other);

  // implements Message ----------------------------------------------

  MapStruct* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapStruct& from);
  void MergeFrom(const MapStruct& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:MapStruct)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_bs_2eproto();
  friend void protobuf_AssignDesc_bs_2eproto();
  friend void protobuf_ShutdownFile_bs_2eproto();

  void InitAsDefaultInstance();
  static MapStruct* default_instance_;
};
// -------------------------------------------------------------------

class IndexQuery_Filter : public ::google::protobuf::Message {
 public:
  IndexQuery_Filter();
  virtual ~IndexQuery_Filter();

  IndexQuery_Filter(const IndexQuery_Filter& from);

  inline IndexQuery_Filter& operator=(const IndexQuery_Filter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexQuery_Filter& default_instance();

  void Swap(IndexQuery_Filter* other);

  // implements Message ----------------------------------------------

  IndexQuery_Filter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndexQuery_Filter& from);
  void MergeFrom(const IndexQuery_Filter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool exclude = 3;
  inline bool has_exclude() const;
  inline void clear_exclude();
  static const int kExcludeFieldNumber = 3;
  inline bool exclude() const;
  inline void set_exclude(bool value);

  // optional uint64 min_value = 4;
  inline bool has_min_value() const;
  inline void clear_min_value();
  static const int kMinValueFieldNumber = 4;
  inline ::google::protobuf::uint64 min_value() const;
  inline void set_min_value(::google::protobuf::uint64 value);

  // optional uint64 max_value = 5;
  inline bool has_max_value() const;
  inline void clear_max_value();
  static const int kMaxValueFieldNumber = 5;
  inline ::google::protobuf::uint64 max_value() const;
  inline void set_max_value(::google::protobuf::uint64 value);

  // optional float f_min_value = 6;
  inline bool has_f_min_value() const;
  inline void clear_f_min_value();
  static const int kFMinValueFieldNumber = 6;
  inline float f_min_value() const;
  inline void set_f_min_value(float value);

  // optional float f_max_value = 7;
  inline bool has_f_max_value() const;
  inline void clear_f_max_value();
  static const int kFMaxValueFieldNumber = 7;
  inline float f_max_value() const;
  inline void set_f_max_value(float value);

  // optional bytes content = 8;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 8;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // repeated uint64 values = 9;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 9;
  inline ::google::protobuf::uint64 values(int index) const;
  inline void set_values(int index, ::google::protobuf::uint64 value);
  inline void add_values(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      values() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:IndexQuery.Filter)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_exclude();
  inline void clear_has_exclude();
  inline void set_has_min_value();
  inline void clear_has_min_value();
  inline void set_has_max_value();
  inline void clear_has_max_value();
  inline void set_has_f_min_value();
  inline void clear_has_f_min_value();
  inline void set_has_f_max_value();
  inline void clear_has_f_max_value();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 type_;
  bool exclude_;
  ::google::protobuf::uint64 min_value_;
  ::google::protobuf::uint64 max_value_;
  float f_min_value_;
  float f_max_value_;
  ::std::string* content_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > values_;
  friend void  protobuf_AddDesc_bs_2eproto();
  friend void protobuf_AssignDesc_bs_2eproto();
  friend void protobuf_ShutdownFile_bs_2eproto();

  void InitAsDefaultInstance();
  static IndexQuery_Filter* default_instance_;
};
// -------------------------------------------------------------------

class IndexQuery_Combiner : public ::google::protobuf::Message {
 public:
  IndexQuery_Combiner();
  virtual ~IndexQuery_Combiner();

  IndexQuery_Combiner(const IndexQuery_Combiner& from);

  inline IndexQuery_Combiner& operator=(const IndexQuery_Combiner& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexQuery_Combiner& default_instance();

  void Swap(IndexQuery_Combiner* other);

  // implements Message ----------------------------------------------

  IndexQuery_Combiner* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndexQuery_Combiner& from);
  void MergeFrom(const IndexQuery_Combiner& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional string groupby = 2;
  inline bool has_groupby() const;
  inline void clear_groupby();
  static const int kGroupbyFieldNumber = 2;
  inline const ::std::string& groupby() const;
  inline void set_groupby(const ::std::string& value);
  inline void set_groupby(const char* value);
  inline void set_groupby(const char* value, size_t size);
  inline ::std::string* mutable_groupby();
  inline ::std::string* release_groupby();
  inline void set_allocated_groupby(::std::string* groupby);

  // optional string groupsort = 3;
  inline bool has_groupsort() const;
  inline void clear_groupsort();
  static const int kGroupsortFieldNumber = 3;
  inline const ::std::string& groupsort() const;
  inline void set_groupsort(const ::std::string& value);
  inline void set_groupsort(const char* value);
  inline void set_groupsort(const char* value, size_t size);
  inline ::std::string* mutable_groupsort();
  inline ::std::string* release_groupsort();
  inline void set_allocated_groupsort(::std::string* groupsort);

  // optional bytes content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:IndexQuery.Combiner)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_groupby();
  inline void clear_has_groupby();
  inline void set_has_groupsort();
  inline void clear_has_groupsort();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* groupby_;
  ::std::string* groupsort_;
  ::std::string* content_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_bs_2eproto();
  friend void protobuf_AssignDesc_bs_2eproto();
  friend void protobuf_ShutdownFile_bs_2eproto();

  void InitAsDefaultInstance();
  static IndexQuery_Combiner* default_instance_;
};
// -------------------------------------------------------------------

class IndexQuery_Ranker : public ::google::protobuf::Message {
 public:
  IndexQuery_Ranker();
  virtual ~IndexQuery_Ranker();

  IndexQuery_Ranker(const IndexQuery_Ranker& from);

  inline IndexQuery_Ranker& operator=(const IndexQuery_Ranker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexQuery_Ranker& default_instance();

  void Swap(IndexQuery_Ranker* other);

  // implements Message ----------------------------------------------

  IndexQuery_Ranker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndexQuery_Ranker& from);
  void MergeFrom(const IndexQuery_Ranker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required bytes content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:IndexQuery.Ranker)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* content_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_bs_2eproto();
  friend void protobuf_AssignDesc_bs_2eproto();
  friend void protobuf_ShutdownFile_bs_2eproto();

  void InitAsDefaultInstance();
  static IndexQuery_Ranker* default_instance_;
};
// -------------------------------------------------------------------

class IndexQuery_FieldWeight : public ::google::protobuf::Message {
 public:
  IndexQuery_FieldWeight();
  virtual ~IndexQuery_FieldWeight();

  IndexQuery_FieldWeight(const IndexQuery_FieldWeight& from);

  inline IndexQuery_FieldWeight& operator=(const IndexQuery_FieldWeight& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexQuery_FieldWeight& default_instance();

  void Swap(IndexQuery_FieldWeight* other);

  // implements Message ----------------------------------------------

  IndexQuery_FieldWeight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndexQuery_FieldWeight& from);
  void MergeFrom(const IndexQuery_FieldWeight& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 weight = 2;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 2;
  inline ::google::protobuf::uint32 weight() const;
  inline void set_weight(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IndexQuery.FieldWeight)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_weight();
  inline void clear_has_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 weight_;
  friend void  protobuf_AddDesc_bs_2eproto();
  friend void protobuf_AssignDesc_bs_2eproto();
  friend void protobuf_ShutdownFile_bs_2eproto();

  void InitAsDefaultInstance();
  static IndexQuery_FieldWeight* default_instance_;
};
// -------------------------------------------------------------------

class IndexQuery_GeoAnchor : public ::google::protobuf::Message {
 public:
  IndexQuery_GeoAnchor();
  virtual ~IndexQuery_GeoAnchor();

  IndexQuery_GeoAnchor(const IndexQuery_GeoAnchor& from);

  inline IndexQuery_GeoAnchor& operator=(const IndexQuery_GeoAnchor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexQuery_GeoAnchor& default_instance();

  void Swap(IndexQuery_GeoAnchor* other);

  // implements Message ----------------------------------------------

  IndexQuery_GeoAnchor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndexQuery_GeoAnchor& from);
  void MergeFrom(const IndexQuery_GeoAnchor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string latitude_name = 1;
  inline bool has_latitude_name() const;
  inline void clear_latitude_name();
  static const int kLatitudeNameFieldNumber = 1;
  inline const ::std::string& latitude_name() const;
  inline void set_latitude_name(const ::std::string& value);
  inline void set_latitude_name(const char* value);
  inline void set_latitude_name(const char* value, size_t size);
  inline ::std::string* mutable_latitude_name();
  inline ::std::string* release_latitude_name();
  inline void set_allocated_latitude_name(::std::string* latitude_name);

  // required string longitude_name = 2;
  inline bool has_longitude_name() const;
  inline void clear_longitude_name();
  static const int kLongitudeNameFieldNumber = 2;
  inline const ::std::string& longitude_name() const;
  inline void set_longitude_name(const ::std::string& value);
  inline void set_longitude_name(const char* value);
  inline void set_longitude_name(const char* value, size_t size);
  inline ::std::string* mutable_longitude_name();
  inline ::std::string* release_longitude_name();
  inline void set_allocated_longitude_name(::std::string* longitude_name);

  // required double latitude_value = 3;
  inline bool has_latitude_value() const;
  inline void clear_latitude_value();
  static const int kLatitudeValueFieldNumber = 3;
  inline double latitude_value() const;
  inline void set_latitude_value(double value);

  // required double longitude_value = 4;
  inline bool has_longitude_value() const;
  inline void clear_longitude_value();
  static const int kLongitudeValueFieldNumber = 4;
  inline double longitude_value() const;
  inline void set_longitude_value(double value);

  // @@protoc_insertion_point(class_scope:IndexQuery.GeoAnchor)
 private:
  inline void set_has_latitude_name();
  inline void clear_has_latitude_name();
  inline void set_has_longitude_name();
  inline void clear_has_longitude_name();
  inline void set_has_latitude_value();
  inline void clear_has_latitude_value();
  inline void set_has_longitude_value();
  inline void clear_has_longitude_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* latitude_name_;
  ::std::string* longitude_name_;
  double latitude_value_;
  double longitude_value_;
  friend void  protobuf_AddDesc_bs_2eproto();
  friend void protobuf_AssignDesc_bs_2eproto();
  friend void protobuf_ShutdownFile_bs_2eproto();

  void InitAsDefaultInstance();
  static IndexQuery_GeoAnchor* default_instance_;
};
// -------------------------------------------------------------------

class IndexQuery : public ::google::protobuf::Message {
 public:
  IndexQuery();
  virtual ~IndexQuery();

  IndexQuery(const IndexQuery& from);

  inline IndexQuery& operator=(const IndexQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexQuery& default_instance();

  void Swap(IndexQuery* other);

  // implements Message ----------------------------------------------

  IndexQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndexQuery& from);
  void MergeFrom(const IndexQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndexQuery_Filter Filter;
  typedef IndexQuery_Combiner Combiner;
  typedef IndexQuery_Ranker Ranker;
  typedef IndexQuery_FieldWeight FieldWeight;
  typedef IndexQuery_GeoAnchor GeoAnchor;

  // accessors -------------------------------------------------------

  // required uint32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // required string qid = 2;
  inline bool has_qid() const;
  inline void clear_qid();
  static const int kQidFieldNumber = 2;
  inline const ::std::string& qid() const;
  inline void set_qid(const ::std::string& value);
  inline void set_qid(const char* value);
  inline void set_qid(const char* value, size_t size);
  inline ::std::string* mutable_qid();
  inline ::std::string* release_qid();
  inline void set_allocated_qid(::std::string* qid);

  // required uint32 offset = 3;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 3;
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // required uint32 limit = 4;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 4;
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // required string indexname = 5;
  inline bool has_indexname() const;
  inline void clear_indexname();
  static const int kIndexnameFieldNumber = 5;
  inline const ::std::string& indexname() const;
  inline void set_indexname(const ::std::string& value);
  inline void set_indexname(const char* value);
  inline void set_indexname(const char* value, size_t size);
  inline ::std::string* mutable_indexname();
  inline ::std::string* release_indexname();
  inline void set_allocated_indexname(::std::string* indexname);

  // optional bytes querystr = 6;
  inline bool has_querystr() const;
  inline void clear_querystr();
  static const int kQuerystrFieldNumber = 6;
  inline const ::std::string& querystr() const;
  inline void set_querystr(const ::std::string& value);
  inline void set_querystr(const char* value);
  inline void set_querystr(const void* value, size_t size);
  inline ::std::string* mutable_querystr();
  inline ::std::string* release_querystr();
  inline void set_allocated_querystr(::std::string* querystr);

  // optional bool debug = 7;
  inline bool has_debug() const;
  inline void clear_debug();
  static const int kDebugFieldNumber = 7;
  inline bool debug() const;
  inline void set_debug(bool value);

  // repeated .IndexQuery.Filter filterlist = 8;
  inline int filterlist_size() const;
  inline void clear_filterlist();
  static const int kFilterlistFieldNumber = 8;
  inline const ::IndexQuery_Filter& filterlist(int index) const;
  inline ::IndexQuery_Filter* mutable_filterlist(int index);
  inline ::IndexQuery_Filter* add_filterlist();
  inline const ::google::protobuf::RepeatedPtrField< ::IndexQuery_Filter >&
      filterlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::IndexQuery_Filter >*
      mutable_filterlist();

  // optional .IndexQuery.Combiner combiner = 9;
  inline bool has_combiner() const;
  inline void clear_combiner();
  static const int kCombinerFieldNumber = 9;
  inline const ::IndexQuery_Combiner& combiner() const;
  inline ::IndexQuery_Combiner* mutable_combiner();
  inline ::IndexQuery_Combiner* release_combiner();
  inline void set_allocated_combiner(::IndexQuery_Combiner* combiner);

  // optional .IndexQuery.Ranker ranker = 10;
  inline bool has_ranker() const;
  inline void clear_ranker();
  static const int kRankerFieldNumber = 10;
  inline const ::IndexQuery_Ranker& ranker() const;
  inline ::IndexQuery_Ranker* mutable_ranker();
  inline ::IndexQuery_Ranker* release_ranker();
  inline void set_allocated_ranker(::IndexQuery_Ranker* ranker);

  // repeated string selectattrlist = 11;
  inline int selectattrlist_size() const;
  inline void clear_selectattrlist();
  static const int kSelectattrlistFieldNumber = 11;
  inline const ::std::string& selectattrlist(int index) const;
  inline ::std::string* mutable_selectattrlist(int index);
  inline void set_selectattrlist(int index, const ::std::string& value);
  inline void set_selectattrlist(int index, const char* value);
  inline void set_selectattrlist(int index, const char* value, size_t size);
  inline ::std::string* add_selectattrlist();
  inline void add_selectattrlist(const ::std::string& value);
  inline void add_selectattrlist(const char* value);
  inline void add_selectattrlist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& selectattrlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_selectattrlist();

  // optional uint32 indexweight = 12;
  inline bool has_indexweight() const;
  inline void clear_indexweight();
  static const int kIndexweightFieldNumber = 12;
  inline ::google::protobuf::uint32 indexweight() const;
  inline void set_indexweight(::google::protobuf::uint32 value);

  // repeated .IndexQuery.FieldWeight fieldweightlist = 13;
  inline int fieldweightlist_size() const;
  inline void clear_fieldweightlist();
  static const int kFieldweightlistFieldNumber = 13;
  inline const ::IndexQuery_FieldWeight& fieldweightlist(int index) const;
  inline ::IndexQuery_FieldWeight* mutable_fieldweightlist(int index);
  inline ::IndexQuery_FieldWeight* add_fieldweightlist();
  inline const ::google::protobuf::RepeatedPtrField< ::IndexQuery_FieldWeight >&
      fieldweightlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::IndexQuery_FieldWeight >*
      mutable_fieldweightlist();

  // optional .IndexQuery.GeoAnchor geo_anchor = 14;
  inline bool has_geo_anchor() const;
  inline void clear_geo_anchor();
  static const int kGeoAnchorFieldNumber = 14;
  inline const ::IndexQuery_GeoAnchor& geo_anchor() const;
  inline ::IndexQuery_GeoAnchor* mutable_geo_anchor();
  inline ::IndexQuery_GeoAnchor* release_geo_anchor();
  inline void set_allocated_geo_anchor(::IndexQuery_GeoAnchor* geo_anchor);

  // optional string limit_attr = 15;
  inline bool has_limit_attr() const;
  inline void clear_limit_attr();
  static const int kLimitAttrFieldNumber = 15;
  inline const ::std::string& limit_attr() const;
  inline void set_limit_attr(const ::std::string& value);
  inline void set_limit_attr(const char* value);
  inline void set_limit_attr(const char* value, size_t size);
  inline ::std::string* mutable_limit_attr();
  inline ::std::string* release_limit_attr();
  inline void set_allocated_limit_attr(::std::string* limit_attr);

  // @@protoc_insertion_point(class_scope:IndexQuery)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_qid();
  inline void clear_has_qid();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();
  inline void set_has_indexname();
  inline void clear_has_indexname();
  inline void set_has_querystr();
  inline void clear_has_querystr();
  inline void set_has_debug();
  inline void clear_has_debug();
  inline void set_has_combiner();
  inline void clear_has_combiner();
  inline void set_has_ranker();
  inline void clear_has_ranker();
  inline void set_has_indexweight();
  inline void clear_has_indexweight();
  inline void set_has_geo_anchor();
  inline void clear_has_geo_anchor();
  inline void set_has_limit_attr();
  inline void clear_has_limit_attr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* qid_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 offset_;
  ::std::string* indexname_;
  ::google::protobuf::uint32 limit_;
  bool debug_;
  ::std::string* querystr_;
  ::google::protobuf::RepeatedPtrField< ::IndexQuery_Filter > filterlist_;
  ::IndexQuery_Combiner* combiner_;
  ::IndexQuery_Ranker* ranker_;
  ::google::protobuf::RepeatedPtrField< ::std::string> selectattrlist_;
  ::google::protobuf::RepeatedPtrField< ::IndexQuery_FieldWeight > fieldweightlist_;
  ::IndexQuery_GeoAnchor* geo_anchor_;
  ::std::string* limit_attr_;
  ::google::protobuf::uint32 indexweight_;
  friend void  protobuf_AddDesc_bs_2eproto();
  friend void protobuf_AssignDesc_bs_2eproto();
  friend void protobuf_ShutdownFile_bs_2eproto();

  void InitAsDefaultInstance();
  static IndexQuery* default_instance_;
};
// -------------------------------------------------------------------

class IndexQueryReq : public ::google::protobuf::Message {
 public:
  IndexQueryReq();
  virtual ~IndexQueryReq();

  IndexQueryReq(const IndexQueryReq& from);

  inline IndexQueryReq& operator=(const IndexQueryReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexQueryReq& default_instance();

  void Swap(IndexQueryReq* other);

  // implements Message ----------------------------------------------

  IndexQueryReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndexQueryReq& from);
  void MergeFrom(const IndexQueryReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .IndexQuery query = 1;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 1;
  inline const ::IndexQuery& query() const;
  inline ::IndexQuery* mutable_query();
  inline ::IndexQuery* release_query();
  inline void set_allocated_query(::IndexQuery* query);

  // optional string QueryAnalysisInfo = 2;
  inline bool has_queryanalysisinfo() const;
  inline void clear_queryanalysisinfo();
  static const int kQueryAnalysisInfoFieldNumber = 2;
  inline const ::std::string& queryanalysisinfo() const;
  inline void set_queryanalysisinfo(const ::std::string& value);
  inline void set_queryanalysisinfo(const char* value);
  inline void set_queryanalysisinfo(const char* value, size_t size);
  inline ::std::string* mutable_queryanalysisinfo();
  inline ::std::string* release_queryanalysisinfo();
  inline void set_allocated_queryanalysisinfo(::std::string* queryanalysisinfo);

  // repeated .MapStruct exinfo = 100;
  inline int exinfo_size() const;
  inline void clear_exinfo();
  static const int kExinfoFieldNumber = 100;
  inline const ::MapStruct& exinfo(int index) const;
  inline ::MapStruct* mutable_exinfo(int index);
  inline ::MapStruct* add_exinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::MapStruct >&
      exinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::MapStruct >*
      mutable_exinfo();

  // @@protoc_insertion_point(class_scope:IndexQueryReq)
 private:
  inline void set_has_query();
  inline void clear_has_query();
  inline void set_has_queryanalysisinfo();
  inline void clear_has_queryanalysisinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::IndexQuery* query_;
  ::std::string* queryanalysisinfo_;
  ::google::protobuf::RepeatedPtrField< ::MapStruct > exinfo_;
  friend void  protobuf_AddDesc_bs_2eproto();
  friend void protobuf_AssignDesc_bs_2eproto();
  friend void protobuf_ShutdownFile_bs_2eproto();

  void InitAsDefaultInstance();
  static IndexQueryReq* default_instance_;
};
// -------------------------------------------------------------------

class QueryResult_AttrMeta : public ::google::protobuf::Message {
 public:
  QueryResult_AttrMeta();
  virtual ~QueryResult_AttrMeta();

  QueryResult_AttrMeta(const QueryResult_AttrMeta& from);

  inline QueryResult_AttrMeta& operator=(const QueryResult_AttrMeta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResult_AttrMeta& default_instance();

  void Swap(QueryResult_AttrMeta* other);

  // implements Message ----------------------------------------------

  QueryResult_AttrMeta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryResult_AttrMeta& from);
  void MergeFrom(const QueryResult_AttrMeta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:QueryResult.AttrMeta)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_bs_2eproto();
  friend void protobuf_AssignDesc_bs_2eproto();
  friend void protobuf_ShutdownFile_bs_2eproto();

  void InitAsDefaultInstance();
  static QueryResult_AttrMeta* default_instance_;
};
// -------------------------------------------------------------------

class QueryResult_Record : public ::google::protobuf::Message {
 public:
  QueryResult_Record();
  virtual ~QueryResult_Record();

  QueryResult_Record(const QueryResult_Record& from);

  inline QueryResult_Record& operator=(const QueryResult_Record& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResult_Record& default_instance();

  void Swap(QueryResult_Record* other);

  // implements Message ----------------------------------------------

  QueryResult_Record* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryResult_Record& from);
  void MergeFrom(const QueryResult_Record& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional bytes attrdata = 2;
  inline bool has_attrdata() const;
  inline void clear_attrdata();
  static const int kAttrdataFieldNumber = 2;
  inline const ::std::string& attrdata() const;
  inline void set_attrdata(const ::std::string& value);
  inline void set_attrdata(const char* value);
  inline void set_attrdata(const void* value, size_t size);
  inline ::std::string* mutable_attrdata();
  inline ::std::string* release_attrdata();
  inline void set_allocated_attrdata(::std::string* attrdata);

  // optional bytes userdata = 3;
  inline bool has_userdata() const;
  inline void clear_userdata();
  static const int kUserdataFieldNumber = 3;
  inline const ::std::string& userdata() const;
  inline void set_userdata(const ::std::string& value);
  inline void set_userdata(const char* value);
  inline void set_userdata(const void* value, size_t size);
  inline ::std::string* mutable_userdata();
  inline ::std::string* release_userdata();
  inline void set_allocated_userdata(::std::string* userdata);

  // optional float weight = 4;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 4;
  inline float weight() const;
  inline void set_weight(float value);

  // @@protoc_insertion_point(class_scope:QueryResult.Record)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_attrdata();
  inline void clear_has_attrdata();
  inline void set_has_userdata();
  inline void clear_has_userdata();
  inline void set_has_weight();
  inline void clear_has_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::std::string* attrdata_;
  ::std::string* userdata_;
  float weight_;
  friend void  protobuf_AddDesc_bs_2eproto();
  friend void protobuf_AssignDesc_bs_2eproto();
  friend void protobuf_ShutdownFile_bs_2eproto();

  void InitAsDefaultInstance();
  static QueryResult_Record* default_instance_;
};
// -------------------------------------------------------------------

class QueryResult : public ::google::protobuf::Message {
 public:
  QueryResult();
  virtual ~QueryResult();

  QueryResult(const QueryResult& from);

  inline QueryResult& operator=(const QueryResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResult& default_instance();

  void Swap(QueryResult* other);

  // implements Message ----------------------------------------------

  QueryResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryResult& from);
  void MergeFrom(const QueryResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef QueryResult_AttrMeta AttrMeta;
  typedef QueryResult_Record Record;

  // accessors -------------------------------------------------------

  // required uint32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // required string qid = 2;
  inline bool has_qid() const;
  inline void clear_qid();
  static const int kQidFieldNumber = 2;
  inline const ::std::string& qid() const;
  inline void set_qid(const ::std::string& value);
  inline void set_qid(const char* value);
  inline void set_qid(const char* value, size_t size);
  inline ::std::string* mutable_qid();
  inline ::std::string* release_qid();
  inline void set_allocated_qid(::std::string* qid);

  // optional string tag = 3;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 3;
  inline const ::std::string& tag() const;
  inline void set_tag(const ::std::string& value);
  inline void set_tag(const char* value);
  inline void set_tag(const char* value, size_t size);
  inline ::std::string* mutable_tag();
  inline ::std::string* release_tag();
  inline void set_allocated_tag(::std::string* tag);

  // repeated .QueryResult.AttrMeta attrmetalist = 4;
  inline int attrmetalist_size() const;
  inline void clear_attrmetalist();
  static const int kAttrmetalistFieldNumber = 4;
  inline const ::QueryResult_AttrMeta& attrmetalist(int index) const;
  inline ::QueryResult_AttrMeta* mutable_attrmetalist(int index);
  inline ::QueryResult_AttrMeta* add_attrmetalist();
  inline const ::google::protobuf::RepeatedPtrField< ::QueryResult_AttrMeta >&
      attrmetalist() const;
  inline ::google::protobuf::RepeatedPtrField< ::QueryResult_AttrMeta >*
      mutable_attrmetalist();

  // repeated .QueryResult.Record recordlist = 5;
  inline int recordlist_size() const;
  inline void clear_recordlist();
  static const int kRecordlistFieldNumber = 5;
  inline const ::QueryResult_Record& recordlist(int index) const;
  inline ::QueryResult_Record* mutable_recordlist(int index);
  inline ::QueryResult_Record* add_recordlist();
  inline const ::google::protobuf::RepeatedPtrField< ::QueryResult_Record >&
      recordlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::QueryResult_Record >*
      mutable_recordlist();

  // @@protoc_insertion_point(class_scope:QueryResult)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_qid();
  inline void clear_has_qid();
  inline void set_has_tag();
  inline void clear_has_tag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* qid_;
  ::std::string* tag_;
  ::google::protobuf::RepeatedPtrField< ::QueryResult_AttrMeta > attrmetalist_;
  ::google::protobuf::RepeatedPtrField< ::QueryResult_Record > recordlist_;
  ::google::protobuf::uint32 status_;
  friend void  protobuf_AddDesc_bs_2eproto();
  friend void protobuf_AssignDesc_bs_2eproto();
  friend void protobuf_ShutdownFile_bs_2eproto();

  void InitAsDefaultInstance();
  static QueryResult* default_instance_;
};
// -------------------------------------------------------------------

class IndexDebugInfo : public ::google::protobuf::Message {
 public:
  IndexDebugInfo();
  virtual ~IndexDebugInfo();

  IndexDebugInfo(const IndexDebugInfo& from);

  inline IndexDebugInfo& operator=(const IndexDebugInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexDebugInfo& default_instance();

  void Swap(IndexDebugInfo* other);

  // implements Message ----------------------------------------------

  IndexDebugInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndexDebugInfo& from);
  void MergeFrom(const IndexDebugInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string host = 1;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  inline void set_allocated_host(::std::string* host);

  // optional uint64 cost = 2;
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 2;
  inline ::google::protobuf::uint64 cost() const;
  inline void set_cost(::google::protobuf::uint64 value);

  // optional bytes querystr = 3;
  inline bool has_querystr() const;
  inline void clear_querystr();
  static const int kQuerystrFieldNumber = 3;
  inline const ::std::string& querystr() const;
  inline void set_querystr(const ::std::string& value);
  inline void set_querystr(const char* value);
  inline void set_querystr(const void* value, size_t size);
  inline ::std::string* mutable_querystr();
  inline ::std::string* release_querystr();
  inline void set_allocated_querystr(::std::string* querystr);

  // @@protoc_insertion_point(class_scope:IndexDebugInfo)
 private:
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_cost();
  inline void clear_has_cost();
  inline void set_has_querystr();
  inline void clear_has_querystr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* host_;
  ::google::protobuf::uint64 cost_;
  ::std::string* querystr_;
  friend void  protobuf_AddDesc_bs_2eproto();
  friend void protobuf_AssignDesc_bs_2eproto();
  friend void protobuf_ShutdownFile_bs_2eproto();

  void InitAsDefaultInstance();
  static IndexDebugInfo* default_instance_;
};
// -------------------------------------------------------------------

class IndexQueryRes : public ::google::protobuf::Message {
 public:
  IndexQueryRes();
  virtual ~IndexQueryRes();

  IndexQueryRes(const IndexQueryRes& from);

  inline IndexQueryRes& operator=(const IndexQueryRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexQueryRes& default_instance();

  void Swap(IndexQueryRes* other);

  // implements Message ----------------------------------------------

  IndexQueryRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndexQueryRes& from);
  void MergeFrom(const IndexQueryRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .QueryResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::QueryResult& result() const;
  inline ::QueryResult* mutable_result();
  inline ::QueryResult* release_result();
  inline void set_allocated_result(::QueryResult* result);

  // optional .IndexDebugInfo debuginfo = 2;
  inline bool has_debuginfo() const;
  inline void clear_debuginfo();
  static const int kDebuginfoFieldNumber = 2;
  inline const ::IndexDebugInfo& debuginfo() const;
  inline ::IndexDebugInfo* mutable_debuginfo();
  inline ::IndexDebugInfo* release_debuginfo();
  inline void set_allocated_debuginfo(::IndexDebugInfo* debuginfo);

  // repeated .MapStruct exinfo = 100;
  inline int exinfo_size() const;
  inline void clear_exinfo();
  static const int kExinfoFieldNumber = 100;
  inline const ::MapStruct& exinfo(int index) const;
  inline ::MapStruct* mutable_exinfo(int index);
  inline ::MapStruct* add_exinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::MapStruct >&
      exinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::MapStruct >*
      mutable_exinfo();

  // @@protoc_insertion_point(class_scope:IndexQueryRes)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_debuginfo();
  inline void clear_has_debuginfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::QueryResult* result_;
  ::IndexDebugInfo* debuginfo_;
  ::google::protobuf::RepeatedPtrField< ::MapStruct > exinfo_;
  friend void  protobuf_AddDesc_bs_2eproto();
  friend void protobuf_AssignDesc_bs_2eproto();
  friend void protobuf_ShutdownFile_bs_2eproto();

  void InitAsDefaultInstance();
  static IndexQueryRes* default_instance_;
};
// ===================================================================


// ===================================================================

// MapStruct

// required string key = 1;
inline bool MapStruct::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapStruct::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapStruct::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapStruct::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& MapStruct::key() const {
  // @@protoc_insertion_point(field_get:MapStruct.key)
  return *key_;
}
inline void MapStruct::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:MapStruct.key)
}
inline void MapStruct::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:MapStruct.key)
}
inline void MapStruct::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MapStruct.key)
}
inline ::std::string* MapStruct::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MapStruct.key)
  return key_;
}
inline ::std::string* MapStruct::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MapStruct::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MapStruct.key)
}

// required string value = 2;
inline bool MapStruct::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapStruct::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapStruct::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapStruct::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& MapStruct::value() const {
  // @@protoc_insertion_point(field_get:MapStruct.value)
  return *value_;
}
inline void MapStruct::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:MapStruct.value)
}
inline void MapStruct::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:MapStruct.value)
}
inline void MapStruct::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MapStruct.value)
}
inline ::std::string* MapStruct::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MapStruct.value)
  return value_;
}
inline ::std::string* MapStruct::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MapStruct::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MapStruct.value)
}

// -------------------------------------------------------------------

// IndexQuery_Filter

// required uint32 type = 1;
inline bool IndexQuery_Filter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndexQuery_Filter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndexQuery_Filter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndexQuery_Filter::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 IndexQuery_Filter::type() const {
  // @@protoc_insertion_point(field_get:IndexQuery.Filter.type)
  return type_;
}
inline void IndexQuery_Filter::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:IndexQuery.Filter.type)
}

// optional string name = 2;
inline bool IndexQuery_Filter::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndexQuery_Filter::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndexQuery_Filter::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndexQuery_Filter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& IndexQuery_Filter::name() const {
  // @@protoc_insertion_point(field_get:IndexQuery.Filter.name)
  return *name_;
}
inline void IndexQuery_Filter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:IndexQuery.Filter.name)
}
inline void IndexQuery_Filter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IndexQuery.Filter.name)
}
inline void IndexQuery_Filter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IndexQuery.Filter.name)
}
inline ::std::string* IndexQuery_Filter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IndexQuery.Filter.name)
  return name_;
}
inline ::std::string* IndexQuery_Filter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndexQuery_Filter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IndexQuery.Filter.name)
}

// optional bool exclude = 3;
inline bool IndexQuery_Filter::has_exclude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndexQuery_Filter::set_has_exclude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndexQuery_Filter::clear_has_exclude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndexQuery_Filter::clear_exclude() {
  exclude_ = false;
  clear_has_exclude();
}
inline bool IndexQuery_Filter::exclude() const {
  // @@protoc_insertion_point(field_get:IndexQuery.Filter.exclude)
  return exclude_;
}
inline void IndexQuery_Filter::set_exclude(bool value) {
  set_has_exclude();
  exclude_ = value;
  // @@protoc_insertion_point(field_set:IndexQuery.Filter.exclude)
}

// optional uint64 min_value = 4;
inline bool IndexQuery_Filter::has_min_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndexQuery_Filter::set_has_min_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndexQuery_Filter::clear_has_min_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndexQuery_Filter::clear_min_value() {
  min_value_ = GOOGLE_ULONGLONG(0);
  clear_has_min_value();
}
inline ::google::protobuf::uint64 IndexQuery_Filter::min_value() const {
  // @@protoc_insertion_point(field_get:IndexQuery.Filter.min_value)
  return min_value_;
}
inline void IndexQuery_Filter::set_min_value(::google::protobuf::uint64 value) {
  set_has_min_value();
  min_value_ = value;
  // @@protoc_insertion_point(field_set:IndexQuery.Filter.min_value)
}

// optional uint64 max_value = 5;
inline bool IndexQuery_Filter::has_max_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndexQuery_Filter::set_has_max_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndexQuery_Filter::clear_has_max_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndexQuery_Filter::clear_max_value() {
  max_value_ = GOOGLE_ULONGLONG(0);
  clear_has_max_value();
}
inline ::google::protobuf::uint64 IndexQuery_Filter::max_value() const {
  // @@protoc_insertion_point(field_get:IndexQuery.Filter.max_value)
  return max_value_;
}
inline void IndexQuery_Filter::set_max_value(::google::protobuf::uint64 value) {
  set_has_max_value();
  max_value_ = value;
  // @@protoc_insertion_point(field_set:IndexQuery.Filter.max_value)
}

// optional float f_min_value = 6;
inline bool IndexQuery_Filter::has_f_min_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndexQuery_Filter::set_has_f_min_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndexQuery_Filter::clear_has_f_min_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndexQuery_Filter::clear_f_min_value() {
  f_min_value_ = 0;
  clear_has_f_min_value();
}
inline float IndexQuery_Filter::f_min_value() const {
  // @@protoc_insertion_point(field_get:IndexQuery.Filter.f_min_value)
  return f_min_value_;
}
inline void IndexQuery_Filter::set_f_min_value(float value) {
  set_has_f_min_value();
  f_min_value_ = value;
  // @@protoc_insertion_point(field_set:IndexQuery.Filter.f_min_value)
}

// optional float f_max_value = 7;
inline bool IndexQuery_Filter::has_f_max_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IndexQuery_Filter::set_has_f_max_value() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IndexQuery_Filter::clear_has_f_max_value() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IndexQuery_Filter::clear_f_max_value() {
  f_max_value_ = 0;
  clear_has_f_max_value();
}
inline float IndexQuery_Filter::f_max_value() const {
  // @@protoc_insertion_point(field_get:IndexQuery.Filter.f_max_value)
  return f_max_value_;
}
inline void IndexQuery_Filter::set_f_max_value(float value) {
  set_has_f_max_value();
  f_max_value_ = value;
  // @@protoc_insertion_point(field_set:IndexQuery.Filter.f_max_value)
}

// optional bytes content = 8;
inline bool IndexQuery_Filter::has_content() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IndexQuery_Filter::set_has_content() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IndexQuery_Filter::clear_has_content() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IndexQuery_Filter::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& IndexQuery_Filter::content() const {
  // @@protoc_insertion_point(field_get:IndexQuery.Filter.content)
  return *content_;
}
inline void IndexQuery_Filter::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:IndexQuery.Filter.content)
}
inline void IndexQuery_Filter::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:IndexQuery.Filter.content)
}
inline void IndexQuery_Filter::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IndexQuery.Filter.content)
}
inline ::std::string* IndexQuery_Filter::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IndexQuery.Filter.content)
  return content_;
}
inline ::std::string* IndexQuery_Filter::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndexQuery_Filter::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IndexQuery.Filter.content)
}

// repeated uint64 values = 9;
inline int IndexQuery_Filter::values_size() const {
  return values_.size();
}
inline void IndexQuery_Filter::clear_values() {
  values_.Clear();
}
inline ::google::protobuf::uint64 IndexQuery_Filter::values(int index) const {
  // @@protoc_insertion_point(field_get:IndexQuery.Filter.values)
  return values_.Get(index);
}
inline void IndexQuery_Filter::set_values(int index, ::google::protobuf::uint64 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndexQuery.Filter.values)
}
inline void IndexQuery_Filter::add_values(::google::protobuf::uint64 value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:IndexQuery.Filter.values)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
IndexQuery_Filter::values() const {
  // @@protoc_insertion_point(field_list:IndexQuery.Filter.values)
  return values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
IndexQuery_Filter::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:IndexQuery.Filter.values)
  return &values_;
}

// -------------------------------------------------------------------

// IndexQuery_Combiner

// required uint32 type = 1;
inline bool IndexQuery_Combiner::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndexQuery_Combiner::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndexQuery_Combiner::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndexQuery_Combiner::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 IndexQuery_Combiner::type() const {
  // @@protoc_insertion_point(field_get:IndexQuery.Combiner.type)
  return type_;
}
inline void IndexQuery_Combiner::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:IndexQuery.Combiner.type)
}

// optional string groupby = 2;
inline bool IndexQuery_Combiner::has_groupby() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndexQuery_Combiner::set_has_groupby() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndexQuery_Combiner::clear_has_groupby() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndexQuery_Combiner::clear_groupby() {
  if (groupby_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupby_->clear();
  }
  clear_has_groupby();
}
inline const ::std::string& IndexQuery_Combiner::groupby() const {
  // @@protoc_insertion_point(field_get:IndexQuery.Combiner.groupby)
  return *groupby_;
}
inline void IndexQuery_Combiner::set_groupby(const ::std::string& value) {
  set_has_groupby();
  if (groupby_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupby_ = new ::std::string;
  }
  groupby_->assign(value);
  // @@protoc_insertion_point(field_set:IndexQuery.Combiner.groupby)
}
inline void IndexQuery_Combiner::set_groupby(const char* value) {
  set_has_groupby();
  if (groupby_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupby_ = new ::std::string;
  }
  groupby_->assign(value);
  // @@protoc_insertion_point(field_set_char:IndexQuery.Combiner.groupby)
}
inline void IndexQuery_Combiner::set_groupby(const char* value, size_t size) {
  set_has_groupby();
  if (groupby_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupby_ = new ::std::string;
  }
  groupby_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IndexQuery.Combiner.groupby)
}
inline ::std::string* IndexQuery_Combiner::mutable_groupby() {
  set_has_groupby();
  if (groupby_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupby_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IndexQuery.Combiner.groupby)
  return groupby_;
}
inline ::std::string* IndexQuery_Combiner::release_groupby() {
  clear_has_groupby();
  if (groupby_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = groupby_;
    groupby_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndexQuery_Combiner::set_allocated_groupby(::std::string* groupby) {
  if (groupby_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groupby_;
  }
  if (groupby) {
    set_has_groupby();
    groupby_ = groupby;
  } else {
    clear_has_groupby();
    groupby_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IndexQuery.Combiner.groupby)
}

// optional string groupsort = 3;
inline bool IndexQuery_Combiner::has_groupsort() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndexQuery_Combiner::set_has_groupsort() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndexQuery_Combiner::clear_has_groupsort() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndexQuery_Combiner::clear_groupsort() {
  if (groupsort_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupsort_->clear();
  }
  clear_has_groupsort();
}
inline const ::std::string& IndexQuery_Combiner::groupsort() const {
  // @@protoc_insertion_point(field_get:IndexQuery.Combiner.groupsort)
  return *groupsort_;
}
inline void IndexQuery_Combiner::set_groupsort(const ::std::string& value) {
  set_has_groupsort();
  if (groupsort_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupsort_ = new ::std::string;
  }
  groupsort_->assign(value);
  // @@protoc_insertion_point(field_set:IndexQuery.Combiner.groupsort)
}
inline void IndexQuery_Combiner::set_groupsort(const char* value) {
  set_has_groupsort();
  if (groupsort_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupsort_ = new ::std::string;
  }
  groupsort_->assign(value);
  // @@protoc_insertion_point(field_set_char:IndexQuery.Combiner.groupsort)
}
inline void IndexQuery_Combiner::set_groupsort(const char* value, size_t size) {
  set_has_groupsort();
  if (groupsort_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupsort_ = new ::std::string;
  }
  groupsort_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IndexQuery.Combiner.groupsort)
}
inline ::std::string* IndexQuery_Combiner::mutable_groupsort() {
  set_has_groupsort();
  if (groupsort_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupsort_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IndexQuery.Combiner.groupsort)
  return groupsort_;
}
inline ::std::string* IndexQuery_Combiner::release_groupsort() {
  clear_has_groupsort();
  if (groupsort_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = groupsort_;
    groupsort_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndexQuery_Combiner::set_allocated_groupsort(::std::string* groupsort) {
  if (groupsort_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groupsort_;
  }
  if (groupsort) {
    set_has_groupsort();
    groupsort_ = groupsort;
  } else {
    clear_has_groupsort();
    groupsort_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IndexQuery.Combiner.groupsort)
}

// optional bytes content = 4;
inline bool IndexQuery_Combiner::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndexQuery_Combiner::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndexQuery_Combiner::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndexQuery_Combiner::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& IndexQuery_Combiner::content() const {
  // @@protoc_insertion_point(field_get:IndexQuery.Combiner.content)
  return *content_;
}
inline void IndexQuery_Combiner::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:IndexQuery.Combiner.content)
}
inline void IndexQuery_Combiner::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:IndexQuery.Combiner.content)
}
inline void IndexQuery_Combiner::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IndexQuery.Combiner.content)
}
inline ::std::string* IndexQuery_Combiner::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IndexQuery.Combiner.content)
  return content_;
}
inline ::std::string* IndexQuery_Combiner::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndexQuery_Combiner::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IndexQuery.Combiner.content)
}

// -------------------------------------------------------------------

// IndexQuery_Ranker

// required uint32 type = 1;
inline bool IndexQuery_Ranker::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndexQuery_Ranker::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndexQuery_Ranker::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndexQuery_Ranker::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 IndexQuery_Ranker::type() const {
  // @@protoc_insertion_point(field_get:IndexQuery.Ranker.type)
  return type_;
}
inline void IndexQuery_Ranker::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:IndexQuery.Ranker.type)
}

// required bytes content = 2;
inline bool IndexQuery_Ranker::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndexQuery_Ranker::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndexQuery_Ranker::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndexQuery_Ranker::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& IndexQuery_Ranker::content() const {
  // @@protoc_insertion_point(field_get:IndexQuery.Ranker.content)
  return *content_;
}
inline void IndexQuery_Ranker::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:IndexQuery.Ranker.content)
}
inline void IndexQuery_Ranker::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:IndexQuery.Ranker.content)
}
inline void IndexQuery_Ranker::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IndexQuery.Ranker.content)
}
inline ::std::string* IndexQuery_Ranker::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IndexQuery.Ranker.content)
  return content_;
}
inline ::std::string* IndexQuery_Ranker::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndexQuery_Ranker::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IndexQuery.Ranker.content)
}

// -------------------------------------------------------------------

// IndexQuery_FieldWeight

// required string name = 1;
inline bool IndexQuery_FieldWeight::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndexQuery_FieldWeight::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndexQuery_FieldWeight::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndexQuery_FieldWeight::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& IndexQuery_FieldWeight::name() const {
  // @@protoc_insertion_point(field_get:IndexQuery.FieldWeight.name)
  return *name_;
}
inline void IndexQuery_FieldWeight::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:IndexQuery.FieldWeight.name)
}
inline void IndexQuery_FieldWeight::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IndexQuery.FieldWeight.name)
}
inline void IndexQuery_FieldWeight::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IndexQuery.FieldWeight.name)
}
inline ::std::string* IndexQuery_FieldWeight::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IndexQuery.FieldWeight.name)
  return name_;
}
inline ::std::string* IndexQuery_FieldWeight::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndexQuery_FieldWeight::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IndexQuery.FieldWeight.name)
}

// required uint32 weight = 2;
inline bool IndexQuery_FieldWeight::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndexQuery_FieldWeight::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndexQuery_FieldWeight::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndexQuery_FieldWeight::clear_weight() {
  weight_ = 0u;
  clear_has_weight();
}
inline ::google::protobuf::uint32 IndexQuery_FieldWeight::weight() const {
  // @@protoc_insertion_point(field_get:IndexQuery.FieldWeight.weight)
  return weight_;
}
inline void IndexQuery_FieldWeight::set_weight(::google::protobuf::uint32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:IndexQuery.FieldWeight.weight)
}

// -------------------------------------------------------------------

// IndexQuery_GeoAnchor

// required string latitude_name = 1;
inline bool IndexQuery_GeoAnchor::has_latitude_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndexQuery_GeoAnchor::set_has_latitude_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndexQuery_GeoAnchor::clear_has_latitude_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndexQuery_GeoAnchor::clear_latitude_name() {
  if (latitude_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    latitude_name_->clear();
  }
  clear_has_latitude_name();
}
inline const ::std::string& IndexQuery_GeoAnchor::latitude_name() const {
  // @@protoc_insertion_point(field_get:IndexQuery.GeoAnchor.latitude_name)
  return *latitude_name_;
}
inline void IndexQuery_GeoAnchor::set_latitude_name(const ::std::string& value) {
  set_has_latitude_name();
  if (latitude_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    latitude_name_ = new ::std::string;
  }
  latitude_name_->assign(value);
  // @@protoc_insertion_point(field_set:IndexQuery.GeoAnchor.latitude_name)
}
inline void IndexQuery_GeoAnchor::set_latitude_name(const char* value) {
  set_has_latitude_name();
  if (latitude_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    latitude_name_ = new ::std::string;
  }
  latitude_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IndexQuery.GeoAnchor.latitude_name)
}
inline void IndexQuery_GeoAnchor::set_latitude_name(const char* value, size_t size) {
  set_has_latitude_name();
  if (latitude_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    latitude_name_ = new ::std::string;
  }
  latitude_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IndexQuery.GeoAnchor.latitude_name)
}
inline ::std::string* IndexQuery_GeoAnchor::mutable_latitude_name() {
  set_has_latitude_name();
  if (latitude_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    latitude_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IndexQuery.GeoAnchor.latitude_name)
  return latitude_name_;
}
inline ::std::string* IndexQuery_GeoAnchor::release_latitude_name() {
  clear_has_latitude_name();
  if (latitude_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = latitude_name_;
    latitude_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndexQuery_GeoAnchor::set_allocated_latitude_name(::std::string* latitude_name) {
  if (latitude_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete latitude_name_;
  }
  if (latitude_name) {
    set_has_latitude_name();
    latitude_name_ = latitude_name;
  } else {
    clear_has_latitude_name();
    latitude_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IndexQuery.GeoAnchor.latitude_name)
}

// required string longitude_name = 2;
inline bool IndexQuery_GeoAnchor::has_longitude_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndexQuery_GeoAnchor::set_has_longitude_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndexQuery_GeoAnchor::clear_has_longitude_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndexQuery_GeoAnchor::clear_longitude_name() {
  if (longitude_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    longitude_name_->clear();
  }
  clear_has_longitude_name();
}
inline const ::std::string& IndexQuery_GeoAnchor::longitude_name() const {
  // @@protoc_insertion_point(field_get:IndexQuery.GeoAnchor.longitude_name)
  return *longitude_name_;
}
inline void IndexQuery_GeoAnchor::set_longitude_name(const ::std::string& value) {
  set_has_longitude_name();
  if (longitude_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    longitude_name_ = new ::std::string;
  }
  longitude_name_->assign(value);
  // @@protoc_insertion_point(field_set:IndexQuery.GeoAnchor.longitude_name)
}
inline void IndexQuery_GeoAnchor::set_longitude_name(const char* value) {
  set_has_longitude_name();
  if (longitude_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    longitude_name_ = new ::std::string;
  }
  longitude_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IndexQuery.GeoAnchor.longitude_name)
}
inline void IndexQuery_GeoAnchor::set_longitude_name(const char* value, size_t size) {
  set_has_longitude_name();
  if (longitude_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    longitude_name_ = new ::std::string;
  }
  longitude_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IndexQuery.GeoAnchor.longitude_name)
}
inline ::std::string* IndexQuery_GeoAnchor::mutable_longitude_name() {
  set_has_longitude_name();
  if (longitude_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    longitude_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IndexQuery.GeoAnchor.longitude_name)
  return longitude_name_;
}
inline ::std::string* IndexQuery_GeoAnchor::release_longitude_name() {
  clear_has_longitude_name();
  if (longitude_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = longitude_name_;
    longitude_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndexQuery_GeoAnchor::set_allocated_longitude_name(::std::string* longitude_name) {
  if (longitude_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete longitude_name_;
  }
  if (longitude_name) {
    set_has_longitude_name();
    longitude_name_ = longitude_name;
  } else {
    clear_has_longitude_name();
    longitude_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IndexQuery.GeoAnchor.longitude_name)
}

// required double latitude_value = 3;
inline bool IndexQuery_GeoAnchor::has_latitude_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndexQuery_GeoAnchor::set_has_latitude_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndexQuery_GeoAnchor::clear_has_latitude_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndexQuery_GeoAnchor::clear_latitude_value() {
  latitude_value_ = 0;
  clear_has_latitude_value();
}
inline double IndexQuery_GeoAnchor::latitude_value() const {
  // @@protoc_insertion_point(field_get:IndexQuery.GeoAnchor.latitude_value)
  return latitude_value_;
}
inline void IndexQuery_GeoAnchor::set_latitude_value(double value) {
  set_has_latitude_value();
  latitude_value_ = value;
  // @@protoc_insertion_point(field_set:IndexQuery.GeoAnchor.latitude_value)
}

// required double longitude_value = 4;
inline bool IndexQuery_GeoAnchor::has_longitude_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndexQuery_GeoAnchor::set_has_longitude_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndexQuery_GeoAnchor::clear_has_longitude_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndexQuery_GeoAnchor::clear_longitude_value() {
  longitude_value_ = 0;
  clear_has_longitude_value();
}
inline double IndexQuery_GeoAnchor::longitude_value() const {
  // @@protoc_insertion_point(field_get:IndexQuery.GeoAnchor.longitude_value)
  return longitude_value_;
}
inline void IndexQuery_GeoAnchor::set_longitude_value(double value) {
  set_has_longitude_value();
  longitude_value_ = value;
  // @@protoc_insertion_point(field_set:IndexQuery.GeoAnchor.longitude_value)
}

// -------------------------------------------------------------------

// IndexQuery

// required uint32 version = 1;
inline bool IndexQuery::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndexQuery::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndexQuery::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndexQuery::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 IndexQuery::version() const {
  // @@protoc_insertion_point(field_get:IndexQuery.version)
  return version_;
}
inline void IndexQuery::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:IndexQuery.version)
}

// required string qid = 2;
inline bool IndexQuery::has_qid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndexQuery::set_has_qid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndexQuery::clear_has_qid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndexQuery::clear_qid() {
  if (qid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qid_->clear();
  }
  clear_has_qid();
}
inline const ::std::string& IndexQuery::qid() const {
  // @@protoc_insertion_point(field_get:IndexQuery.qid)
  return *qid_;
}
inline void IndexQuery::set_qid(const ::std::string& value) {
  set_has_qid();
  if (qid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qid_ = new ::std::string;
  }
  qid_->assign(value);
  // @@protoc_insertion_point(field_set:IndexQuery.qid)
}
inline void IndexQuery::set_qid(const char* value) {
  set_has_qid();
  if (qid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qid_ = new ::std::string;
  }
  qid_->assign(value);
  // @@protoc_insertion_point(field_set_char:IndexQuery.qid)
}
inline void IndexQuery::set_qid(const char* value, size_t size) {
  set_has_qid();
  if (qid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qid_ = new ::std::string;
  }
  qid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IndexQuery.qid)
}
inline ::std::string* IndexQuery::mutable_qid() {
  set_has_qid();
  if (qid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IndexQuery.qid)
  return qid_;
}
inline ::std::string* IndexQuery::release_qid() {
  clear_has_qid();
  if (qid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = qid_;
    qid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndexQuery::set_allocated_qid(::std::string* qid) {
  if (qid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qid_;
  }
  if (qid) {
    set_has_qid();
    qid_ = qid;
  } else {
    clear_has_qid();
    qid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IndexQuery.qid)
}

// required uint32 offset = 3;
inline bool IndexQuery::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndexQuery::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndexQuery::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndexQuery::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 IndexQuery::offset() const {
  // @@protoc_insertion_point(field_get:IndexQuery.offset)
  return offset_;
}
inline void IndexQuery::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:IndexQuery.offset)
}

// required uint32 limit = 4;
inline bool IndexQuery::has_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndexQuery::set_has_limit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndexQuery::clear_has_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndexQuery::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 IndexQuery::limit() const {
  // @@protoc_insertion_point(field_get:IndexQuery.limit)
  return limit_;
}
inline void IndexQuery::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:IndexQuery.limit)
}

// required string indexname = 5;
inline bool IndexQuery::has_indexname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IndexQuery::set_has_indexname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IndexQuery::clear_has_indexname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IndexQuery::clear_indexname() {
  if (indexname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    indexname_->clear();
  }
  clear_has_indexname();
}
inline const ::std::string& IndexQuery::indexname() const {
  // @@protoc_insertion_point(field_get:IndexQuery.indexname)
  return *indexname_;
}
inline void IndexQuery::set_indexname(const ::std::string& value) {
  set_has_indexname();
  if (indexname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    indexname_ = new ::std::string;
  }
  indexname_->assign(value);
  // @@protoc_insertion_point(field_set:IndexQuery.indexname)
}
inline void IndexQuery::set_indexname(const char* value) {
  set_has_indexname();
  if (indexname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    indexname_ = new ::std::string;
  }
  indexname_->assign(value);
  // @@protoc_insertion_point(field_set_char:IndexQuery.indexname)
}
inline void IndexQuery::set_indexname(const char* value, size_t size) {
  set_has_indexname();
  if (indexname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    indexname_ = new ::std::string;
  }
  indexname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IndexQuery.indexname)
}
inline ::std::string* IndexQuery::mutable_indexname() {
  set_has_indexname();
  if (indexname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    indexname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IndexQuery.indexname)
  return indexname_;
}
inline ::std::string* IndexQuery::release_indexname() {
  clear_has_indexname();
  if (indexname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = indexname_;
    indexname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndexQuery::set_allocated_indexname(::std::string* indexname) {
  if (indexname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete indexname_;
  }
  if (indexname) {
    set_has_indexname();
    indexname_ = indexname;
  } else {
    clear_has_indexname();
    indexname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IndexQuery.indexname)
}

// optional bytes querystr = 6;
inline bool IndexQuery::has_querystr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IndexQuery::set_has_querystr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IndexQuery::clear_has_querystr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IndexQuery::clear_querystr() {
  if (querystr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    querystr_->clear();
  }
  clear_has_querystr();
}
inline const ::std::string& IndexQuery::querystr() const {
  // @@protoc_insertion_point(field_get:IndexQuery.querystr)
  return *querystr_;
}
inline void IndexQuery::set_querystr(const ::std::string& value) {
  set_has_querystr();
  if (querystr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    querystr_ = new ::std::string;
  }
  querystr_->assign(value);
  // @@protoc_insertion_point(field_set:IndexQuery.querystr)
}
inline void IndexQuery::set_querystr(const char* value) {
  set_has_querystr();
  if (querystr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    querystr_ = new ::std::string;
  }
  querystr_->assign(value);
  // @@protoc_insertion_point(field_set_char:IndexQuery.querystr)
}
inline void IndexQuery::set_querystr(const void* value, size_t size) {
  set_has_querystr();
  if (querystr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    querystr_ = new ::std::string;
  }
  querystr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IndexQuery.querystr)
}
inline ::std::string* IndexQuery::mutable_querystr() {
  set_has_querystr();
  if (querystr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    querystr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IndexQuery.querystr)
  return querystr_;
}
inline ::std::string* IndexQuery::release_querystr() {
  clear_has_querystr();
  if (querystr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = querystr_;
    querystr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndexQuery::set_allocated_querystr(::std::string* querystr) {
  if (querystr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete querystr_;
  }
  if (querystr) {
    set_has_querystr();
    querystr_ = querystr;
  } else {
    clear_has_querystr();
    querystr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IndexQuery.querystr)
}

// optional bool debug = 7;
inline bool IndexQuery::has_debug() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IndexQuery::set_has_debug() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IndexQuery::clear_has_debug() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IndexQuery::clear_debug() {
  debug_ = false;
  clear_has_debug();
}
inline bool IndexQuery::debug() const {
  // @@protoc_insertion_point(field_get:IndexQuery.debug)
  return debug_;
}
inline void IndexQuery::set_debug(bool value) {
  set_has_debug();
  debug_ = value;
  // @@protoc_insertion_point(field_set:IndexQuery.debug)
}

// repeated .IndexQuery.Filter filterlist = 8;
inline int IndexQuery::filterlist_size() const {
  return filterlist_.size();
}
inline void IndexQuery::clear_filterlist() {
  filterlist_.Clear();
}
inline const ::IndexQuery_Filter& IndexQuery::filterlist(int index) const {
  // @@protoc_insertion_point(field_get:IndexQuery.filterlist)
  return filterlist_.Get(index);
}
inline ::IndexQuery_Filter* IndexQuery::mutable_filterlist(int index) {
  // @@protoc_insertion_point(field_mutable:IndexQuery.filterlist)
  return filterlist_.Mutable(index);
}
inline ::IndexQuery_Filter* IndexQuery::add_filterlist() {
  // @@protoc_insertion_point(field_add:IndexQuery.filterlist)
  return filterlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IndexQuery_Filter >&
IndexQuery::filterlist() const {
  // @@protoc_insertion_point(field_list:IndexQuery.filterlist)
  return filterlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::IndexQuery_Filter >*
IndexQuery::mutable_filterlist() {
  // @@protoc_insertion_point(field_mutable_list:IndexQuery.filterlist)
  return &filterlist_;
}

// optional .IndexQuery.Combiner combiner = 9;
inline bool IndexQuery::has_combiner() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IndexQuery::set_has_combiner() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IndexQuery::clear_has_combiner() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IndexQuery::clear_combiner() {
  if (combiner_ != NULL) combiner_->::IndexQuery_Combiner::Clear();
  clear_has_combiner();
}
inline const ::IndexQuery_Combiner& IndexQuery::combiner() const {
  // @@protoc_insertion_point(field_get:IndexQuery.combiner)
  return combiner_ != NULL ? *combiner_ : *default_instance_->combiner_;
}
inline ::IndexQuery_Combiner* IndexQuery::mutable_combiner() {
  set_has_combiner();
  if (combiner_ == NULL) combiner_ = new ::IndexQuery_Combiner;
  // @@protoc_insertion_point(field_mutable:IndexQuery.combiner)
  return combiner_;
}
inline ::IndexQuery_Combiner* IndexQuery::release_combiner() {
  clear_has_combiner();
  ::IndexQuery_Combiner* temp = combiner_;
  combiner_ = NULL;
  return temp;
}
inline void IndexQuery::set_allocated_combiner(::IndexQuery_Combiner* combiner) {
  delete combiner_;
  combiner_ = combiner;
  if (combiner) {
    set_has_combiner();
  } else {
    clear_has_combiner();
  }
  // @@protoc_insertion_point(field_set_allocated:IndexQuery.combiner)
}

// optional .IndexQuery.Ranker ranker = 10;
inline bool IndexQuery::has_ranker() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IndexQuery::set_has_ranker() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IndexQuery::clear_has_ranker() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IndexQuery::clear_ranker() {
  if (ranker_ != NULL) ranker_->::IndexQuery_Ranker::Clear();
  clear_has_ranker();
}
inline const ::IndexQuery_Ranker& IndexQuery::ranker() const {
  // @@protoc_insertion_point(field_get:IndexQuery.ranker)
  return ranker_ != NULL ? *ranker_ : *default_instance_->ranker_;
}
inline ::IndexQuery_Ranker* IndexQuery::mutable_ranker() {
  set_has_ranker();
  if (ranker_ == NULL) ranker_ = new ::IndexQuery_Ranker;
  // @@protoc_insertion_point(field_mutable:IndexQuery.ranker)
  return ranker_;
}
inline ::IndexQuery_Ranker* IndexQuery::release_ranker() {
  clear_has_ranker();
  ::IndexQuery_Ranker* temp = ranker_;
  ranker_ = NULL;
  return temp;
}
inline void IndexQuery::set_allocated_ranker(::IndexQuery_Ranker* ranker) {
  delete ranker_;
  ranker_ = ranker;
  if (ranker) {
    set_has_ranker();
  } else {
    clear_has_ranker();
  }
  // @@protoc_insertion_point(field_set_allocated:IndexQuery.ranker)
}

// repeated string selectattrlist = 11;
inline int IndexQuery::selectattrlist_size() const {
  return selectattrlist_.size();
}
inline void IndexQuery::clear_selectattrlist() {
  selectattrlist_.Clear();
}
inline const ::std::string& IndexQuery::selectattrlist(int index) const {
  // @@protoc_insertion_point(field_get:IndexQuery.selectattrlist)
  return selectattrlist_.Get(index);
}
inline ::std::string* IndexQuery::mutable_selectattrlist(int index) {
  // @@protoc_insertion_point(field_mutable:IndexQuery.selectattrlist)
  return selectattrlist_.Mutable(index);
}
inline void IndexQuery::set_selectattrlist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IndexQuery.selectattrlist)
  selectattrlist_.Mutable(index)->assign(value);
}
inline void IndexQuery::set_selectattrlist(int index, const char* value) {
  selectattrlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IndexQuery.selectattrlist)
}
inline void IndexQuery::set_selectattrlist(int index, const char* value, size_t size) {
  selectattrlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IndexQuery.selectattrlist)
}
inline ::std::string* IndexQuery::add_selectattrlist() {
  return selectattrlist_.Add();
}
inline void IndexQuery::add_selectattrlist(const ::std::string& value) {
  selectattrlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IndexQuery.selectattrlist)
}
inline void IndexQuery::add_selectattrlist(const char* value) {
  selectattrlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IndexQuery.selectattrlist)
}
inline void IndexQuery::add_selectattrlist(const char* value, size_t size) {
  selectattrlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IndexQuery.selectattrlist)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IndexQuery::selectattrlist() const {
  // @@protoc_insertion_point(field_list:IndexQuery.selectattrlist)
  return selectattrlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IndexQuery::mutable_selectattrlist() {
  // @@protoc_insertion_point(field_mutable_list:IndexQuery.selectattrlist)
  return &selectattrlist_;
}

// optional uint32 indexweight = 12;
inline bool IndexQuery::has_indexweight() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IndexQuery::set_has_indexweight() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IndexQuery::clear_has_indexweight() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IndexQuery::clear_indexweight() {
  indexweight_ = 0u;
  clear_has_indexweight();
}
inline ::google::protobuf::uint32 IndexQuery::indexweight() const {
  // @@protoc_insertion_point(field_get:IndexQuery.indexweight)
  return indexweight_;
}
inline void IndexQuery::set_indexweight(::google::protobuf::uint32 value) {
  set_has_indexweight();
  indexweight_ = value;
  // @@protoc_insertion_point(field_set:IndexQuery.indexweight)
}

// repeated .IndexQuery.FieldWeight fieldweightlist = 13;
inline int IndexQuery::fieldweightlist_size() const {
  return fieldweightlist_.size();
}
inline void IndexQuery::clear_fieldweightlist() {
  fieldweightlist_.Clear();
}
inline const ::IndexQuery_FieldWeight& IndexQuery::fieldweightlist(int index) const {
  // @@protoc_insertion_point(field_get:IndexQuery.fieldweightlist)
  return fieldweightlist_.Get(index);
}
inline ::IndexQuery_FieldWeight* IndexQuery::mutable_fieldweightlist(int index) {
  // @@protoc_insertion_point(field_mutable:IndexQuery.fieldweightlist)
  return fieldweightlist_.Mutable(index);
}
inline ::IndexQuery_FieldWeight* IndexQuery::add_fieldweightlist() {
  // @@protoc_insertion_point(field_add:IndexQuery.fieldweightlist)
  return fieldweightlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IndexQuery_FieldWeight >&
IndexQuery::fieldweightlist() const {
  // @@protoc_insertion_point(field_list:IndexQuery.fieldweightlist)
  return fieldweightlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::IndexQuery_FieldWeight >*
IndexQuery::mutable_fieldweightlist() {
  // @@protoc_insertion_point(field_mutable_list:IndexQuery.fieldweightlist)
  return &fieldweightlist_;
}

// optional .IndexQuery.GeoAnchor geo_anchor = 14;
inline bool IndexQuery::has_geo_anchor() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void IndexQuery::set_has_geo_anchor() {
  _has_bits_[0] |= 0x00002000u;
}
inline void IndexQuery::clear_has_geo_anchor() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void IndexQuery::clear_geo_anchor() {
  if (geo_anchor_ != NULL) geo_anchor_->::IndexQuery_GeoAnchor::Clear();
  clear_has_geo_anchor();
}
inline const ::IndexQuery_GeoAnchor& IndexQuery::geo_anchor() const {
  // @@protoc_insertion_point(field_get:IndexQuery.geo_anchor)
  return geo_anchor_ != NULL ? *geo_anchor_ : *default_instance_->geo_anchor_;
}
inline ::IndexQuery_GeoAnchor* IndexQuery::mutable_geo_anchor() {
  set_has_geo_anchor();
  if (geo_anchor_ == NULL) geo_anchor_ = new ::IndexQuery_GeoAnchor;
  // @@protoc_insertion_point(field_mutable:IndexQuery.geo_anchor)
  return geo_anchor_;
}
inline ::IndexQuery_GeoAnchor* IndexQuery::release_geo_anchor() {
  clear_has_geo_anchor();
  ::IndexQuery_GeoAnchor* temp = geo_anchor_;
  geo_anchor_ = NULL;
  return temp;
}
inline void IndexQuery::set_allocated_geo_anchor(::IndexQuery_GeoAnchor* geo_anchor) {
  delete geo_anchor_;
  geo_anchor_ = geo_anchor;
  if (geo_anchor) {
    set_has_geo_anchor();
  } else {
    clear_has_geo_anchor();
  }
  // @@protoc_insertion_point(field_set_allocated:IndexQuery.geo_anchor)
}

// optional string limit_attr = 15;
inline bool IndexQuery::has_limit_attr() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void IndexQuery::set_has_limit_attr() {
  _has_bits_[0] |= 0x00004000u;
}
inline void IndexQuery::clear_has_limit_attr() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void IndexQuery::clear_limit_attr() {
  if (limit_attr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    limit_attr_->clear();
  }
  clear_has_limit_attr();
}
inline const ::std::string& IndexQuery::limit_attr() const {
  // @@protoc_insertion_point(field_get:IndexQuery.limit_attr)
  return *limit_attr_;
}
inline void IndexQuery::set_limit_attr(const ::std::string& value) {
  set_has_limit_attr();
  if (limit_attr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    limit_attr_ = new ::std::string;
  }
  limit_attr_->assign(value);
  // @@protoc_insertion_point(field_set:IndexQuery.limit_attr)
}
inline void IndexQuery::set_limit_attr(const char* value) {
  set_has_limit_attr();
  if (limit_attr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    limit_attr_ = new ::std::string;
  }
  limit_attr_->assign(value);
  // @@protoc_insertion_point(field_set_char:IndexQuery.limit_attr)
}
inline void IndexQuery::set_limit_attr(const char* value, size_t size) {
  set_has_limit_attr();
  if (limit_attr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    limit_attr_ = new ::std::string;
  }
  limit_attr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IndexQuery.limit_attr)
}
inline ::std::string* IndexQuery::mutable_limit_attr() {
  set_has_limit_attr();
  if (limit_attr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    limit_attr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IndexQuery.limit_attr)
  return limit_attr_;
}
inline ::std::string* IndexQuery::release_limit_attr() {
  clear_has_limit_attr();
  if (limit_attr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = limit_attr_;
    limit_attr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndexQuery::set_allocated_limit_attr(::std::string* limit_attr) {
  if (limit_attr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete limit_attr_;
  }
  if (limit_attr) {
    set_has_limit_attr();
    limit_attr_ = limit_attr;
  } else {
    clear_has_limit_attr();
    limit_attr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IndexQuery.limit_attr)
}

// -------------------------------------------------------------------

// IndexQueryReq

// required .IndexQuery query = 1;
inline bool IndexQueryReq::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndexQueryReq::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndexQueryReq::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndexQueryReq::clear_query() {
  if (query_ != NULL) query_->::IndexQuery::Clear();
  clear_has_query();
}
inline const ::IndexQuery& IndexQueryReq::query() const {
  // @@protoc_insertion_point(field_get:IndexQueryReq.query)
  return query_ != NULL ? *query_ : *default_instance_->query_;
}
inline ::IndexQuery* IndexQueryReq::mutable_query() {
  set_has_query();
  if (query_ == NULL) query_ = new ::IndexQuery;
  // @@protoc_insertion_point(field_mutable:IndexQueryReq.query)
  return query_;
}
inline ::IndexQuery* IndexQueryReq::release_query() {
  clear_has_query();
  ::IndexQuery* temp = query_;
  query_ = NULL;
  return temp;
}
inline void IndexQueryReq::set_allocated_query(::IndexQuery* query) {
  delete query_;
  query_ = query;
  if (query) {
    set_has_query();
  } else {
    clear_has_query();
  }
  // @@protoc_insertion_point(field_set_allocated:IndexQueryReq.query)
}

// optional string QueryAnalysisInfo = 2;
inline bool IndexQueryReq::has_queryanalysisinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndexQueryReq::set_has_queryanalysisinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndexQueryReq::clear_has_queryanalysisinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndexQueryReq::clear_queryanalysisinfo() {
  if (queryanalysisinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    queryanalysisinfo_->clear();
  }
  clear_has_queryanalysisinfo();
}
inline const ::std::string& IndexQueryReq::queryanalysisinfo() const {
  // @@protoc_insertion_point(field_get:IndexQueryReq.QueryAnalysisInfo)
  return *queryanalysisinfo_;
}
inline void IndexQueryReq::set_queryanalysisinfo(const ::std::string& value) {
  set_has_queryanalysisinfo();
  if (queryanalysisinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    queryanalysisinfo_ = new ::std::string;
  }
  queryanalysisinfo_->assign(value);
  // @@protoc_insertion_point(field_set:IndexQueryReq.QueryAnalysisInfo)
}
inline void IndexQueryReq::set_queryanalysisinfo(const char* value) {
  set_has_queryanalysisinfo();
  if (queryanalysisinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    queryanalysisinfo_ = new ::std::string;
  }
  queryanalysisinfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:IndexQueryReq.QueryAnalysisInfo)
}
inline void IndexQueryReq::set_queryanalysisinfo(const char* value, size_t size) {
  set_has_queryanalysisinfo();
  if (queryanalysisinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    queryanalysisinfo_ = new ::std::string;
  }
  queryanalysisinfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IndexQueryReq.QueryAnalysisInfo)
}
inline ::std::string* IndexQueryReq::mutable_queryanalysisinfo() {
  set_has_queryanalysisinfo();
  if (queryanalysisinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    queryanalysisinfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IndexQueryReq.QueryAnalysisInfo)
  return queryanalysisinfo_;
}
inline ::std::string* IndexQueryReq::release_queryanalysisinfo() {
  clear_has_queryanalysisinfo();
  if (queryanalysisinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = queryanalysisinfo_;
    queryanalysisinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndexQueryReq::set_allocated_queryanalysisinfo(::std::string* queryanalysisinfo) {
  if (queryanalysisinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete queryanalysisinfo_;
  }
  if (queryanalysisinfo) {
    set_has_queryanalysisinfo();
    queryanalysisinfo_ = queryanalysisinfo;
  } else {
    clear_has_queryanalysisinfo();
    queryanalysisinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IndexQueryReq.QueryAnalysisInfo)
}

// repeated .MapStruct exinfo = 100;
inline int IndexQueryReq::exinfo_size() const {
  return exinfo_.size();
}
inline void IndexQueryReq::clear_exinfo() {
  exinfo_.Clear();
}
inline const ::MapStruct& IndexQueryReq::exinfo(int index) const {
  // @@protoc_insertion_point(field_get:IndexQueryReq.exinfo)
  return exinfo_.Get(index);
}
inline ::MapStruct* IndexQueryReq::mutable_exinfo(int index) {
  // @@protoc_insertion_point(field_mutable:IndexQueryReq.exinfo)
  return exinfo_.Mutable(index);
}
inline ::MapStruct* IndexQueryReq::add_exinfo() {
  // @@protoc_insertion_point(field_add:IndexQueryReq.exinfo)
  return exinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MapStruct >&
IndexQueryReq::exinfo() const {
  // @@protoc_insertion_point(field_list:IndexQueryReq.exinfo)
  return exinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::MapStruct >*
IndexQueryReq::mutable_exinfo() {
  // @@protoc_insertion_point(field_mutable_list:IndexQueryReq.exinfo)
  return &exinfo_;
}

// -------------------------------------------------------------------

// QueryResult_AttrMeta

// required uint32 type = 1;
inline bool QueryResult_AttrMeta::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryResult_AttrMeta::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryResult_AttrMeta::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryResult_AttrMeta::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 QueryResult_AttrMeta::type() const {
  // @@protoc_insertion_point(field_get:QueryResult.AttrMeta.type)
  return type_;
}
inline void QueryResult_AttrMeta::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:QueryResult.AttrMeta.type)
}

// required string name = 2;
inline bool QueryResult_AttrMeta::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryResult_AttrMeta::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryResult_AttrMeta::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryResult_AttrMeta::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& QueryResult_AttrMeta::name() const {
  // @@protoc_insertion_point(field_get:QueryResult.AttrMeta.name)
  return *name_;
}
inline void QueryResult_AttrMeta::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:QueryResult.AttrMeta.name)
}
inline void QueryResult_AttrMeta::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:QueryResult.AttrMeta.name)
}
inline void QueryResult_AttrMeta::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QueryResult.AttrMeta.name)
}
inline ::std::string* QueryResult_AttrMeta::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QueryResult.AttrMeta.name)
  return name_;
}
inline ::std::string* QueryResult_AttrMeta::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryResult_AttrMeta::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QueryResult.AttrMeta.name)
}

// -------------------------------------------------------------------

// QueryResult_Record

// required uint64 id = 1;
inline bool QueryResult_Record::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryResult_Record::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryResult_Record::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryResult_Record::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 QueryResult_Record::id() const {
  // @@protoc_insertion_point(field_get:QueryResult.Record.id)
  return id_;
}
inline void QueryResult_Record::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:QueryResult.Record.id)
}

// optional bytes attrdata = 2;
inline bool QueryResult_Record::has_attrdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryResult_Record::set_has_attrdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryResult_Record::clear_has_attrdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryResult_Record::clear_attrdata() {
  if (attrdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attrdata_->clear();
  }
  clear_has_attrdata();
}
inline const ::std::string& QueryResult_Record::attrdata() const {
  // @@protoc_insertion_point(field_get:QueryResult.Record.attrdata)
  return *attrdata_;
}
inline void QueryResult_Record::set_attrdata(const ::std::string& value) {
  set_has_attrdata();
  if (attrdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attrdata_ = new ::std::string;
  }
  attrdata_->assign(value);
  // @@protoc_insertion_point(field_set:QueryResult.Record.attrdata)
}
inline void QueryResult_Record::set_attrdata(const char* value) {
  set_has_attrdata();
  if (attrdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attrdata_ = new ::std::string;
  }
  attrdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:QueryResult.Record.attrdata)
}
inline void QueryResult_Record::set_attrdata(const void* value, size_t size) {
  set_has_attrdata();
  if (attrdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attrdata_ = new ::std::string;
  }
  attrdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QueryResult.Record.attrdata)
}
inline ::std::string* QueryResult_Record::mutable_attrdata() {
  set_has_attrdata();
  if (attrdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attrdata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QueryResult.Record.attrdata)
  return attrdata_;
}
inline ::std::string* QueryResult_Record::release_attrdata() {
  clear_has_attrdata();
  if (attrdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attrdata_;
    attrdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryResult_Record::set_allocated_attrdata(::std::string* attrdata) {
  if (attrdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attrdata_;
  }
  if (attrdata) {
    set_has_attrdata();
    attrdata_ = attrdata;
  } else {
    clear_has_attrdata();
    attrdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QueryResult.Record.attrdata)
}

// optional bytes userdata = 3;
inline bool QueryResult_Record::has_userdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryResult_Record::set_has_userdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryResult_Record::clear_has_userdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryResult_Record::clear_userdata() {
  if (userdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdata_->clear();
  }
  clear_has_userdata();
}
inline const ::std::string& QueryResult_Record::userdata() const {
  // @@protoc_insertion_point(field_get:QueryResult.Record.userdata)
  return *userdata_;
}
inline void QueryResult_Record::set_userdata(const ::std::string& value) {
  set_has_userdata();
  if (userdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdata_ = new ::std::string;
  }
  userdata_->assign(value);
  // @@protoc_insertion_point(field_set:QueryResult.Record.userdata)
}
inline void QueryResult_Record::set_userdata(const char* value) {
  set_has_userdata();
  if (userdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdata_ = new ::std::string;
  }
  userdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:QueryResult.Record.userdata)
}
inline void QueryResult_Record::set_userdata(const void* value, size_t size) {
  set_has_userdata();
  if (userdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdata_ = new ::std::string;
  }
  userdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QueryResult.Record.userdata)
}
inline ::std::string* QueryResult_Record::mutable_userdata() {
  set_has_userdata();
  if (userdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QueryResult.Record.userdata)
  return userdata_;
}
inline ::std::string* QueryResult_Record::release_userdata() {
  clear_has_userdata();
  if (userdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = userdata_;
    userdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryResult_Record::set_allocated_userdata(::std::string* userdata) {
  if (userdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userdata_;
  }
  if (userdata) {
    set_has_userdata();
    userdata_ = userdata;
  } else {
    clear_has_userdata();
    userdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QueryResult.Record.userdata)
}

// optional float weight = 4;
inline bool QueryResult_Record::has_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryResult_Record::set_has_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryResult_Record::clear_has_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryResult_Record::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline float QueryResult_Record::weight() const {
  // @@protoc_insertion_point(field_get:QueryResult.Record.weight)
  return weight_;
}
inline void QueryResult_Record::set_weight(float value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:QueryResult.Record.weight)
}

// -------------------------------------------------------------------

// QueryResult

// required uint32 status = 1;
inline bool QueryResult::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryResult::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryResult::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryResult::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 QueryResult::status() const {
  // @@protoc_insertion_point(field_get:QueryResult.status)
  return status_;
}
inline void QueryResult::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:QueryResult.status)
}

// required string qid = 2;
inline bool QueryResult::has_qid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryResult::set_has_qid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryResult::clear_has_qid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryResult::clear_qid() {
  if (qid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qid_->clear();
  }
  clear_has_qid();
}
inline const ::std::string& QueryResult::qid() const {
  // @@protoc_insertion_point(field_get:QueryResult.qid)
  return *qid_;
}
inline void QueryResult::set_qid(const ::std::string& value) {
  set_has_qid();
  if (qid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qid_ = new ::std::string;
  }
  qid_->assign(value);
  // @@protoc_insertion_point(field_set:QueryResult.qid)
}
inline void QueryResult::set_qid(const char* value) {
  set_has_qid();
  if (qid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qid_ = new ::std::string;
  }
  qid_->assign(value);
  // @@protoc_insertion_point(field_set_char:QueryResult.qid)
}
inline void QueryResult::set_qid(const char* value, size_t size) {
  set_has_qid();
  if (qid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qid_ = new ::std::string;
  }
  qid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QueryResult.qid)
}
inline ::std::string* QueryResult::mutable_qid() {
  set_has_qid();
  if (qid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QueryResult.qid)
  return qid_;
}
inline ::std::string* QueryResult::release_qid() {
  clear_has_qid();
  if (qid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = qid_;
    qid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryResult::set_allocated_qid(::std::string* qid) {
  if (qid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qid_;
  }
  if (qid) {
    set_has_qid();
    qid_ = qid;
  } else {
    clear_has_qid();
    qid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QueryResult.qid)
}

// optional string tag = 3;
inline bool QueryResult::has_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryResult::set_has_tag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryResult::clear_has_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryResult::clear_tag() {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_->clear();
  }
  clear_has_tag();
}
inline const ::std::string& QueryResult::tag() const {
  // @@protoc_insertion_point(field_get:QueryResult.tag)
  return *tag_;
}
inline void QueryResult::set_tag(const ::std::string& value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
  // @@protoc_insertion_point(field_set:QueryResult.tag)
}
inline void QueryResult::set_tag(const char* value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
  // @@protoc_insertion_point(field_set_char:QueryResult.tag)
}
inline void QueryResult::set_tag(const char* value, size_t size) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QueryResult.tag)
}
inline ::std::string* QueryResult::mutable_tag() {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QueryResult.tag)
  return tag_;
}
inline ::std::string* QueryResult::release_tag() {
  clear_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tag_;
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryResult::set_allocated_tag(::std::string* tag) {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (tag) {
    set_has_tag();
    tag_ = tag;
  } else {
    clear_has_tag();
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QueryResult.tag)
}

// repeated .QueryResult.AttrMeta attrmetalist = 4;
inline int QueryResult::attrmetalist_size() const {
  return attrmetalist_.size();
}
inline void QueryResult::clear_attrmetalist() {
  attrmetalist_.Clear();
}
inline const ::QueryResult_AttrMeta& QueryResult::attrmetalist(int index) const {
  // @@protoc_insertion_point(field_get:QueryResult.attrmetalist)
  return attrmetalist_.Get(index);
}
inline ::QueryResult_AttrMeta* QueryResult::mutable_attrmetalist(int index) {
  // @@protoc_insertion_point(field_mutable:QueryResult.attrmetalist)
  return attrmetalist_.Mutable(index);
}
inline ::QueryResult_AttrMeta* QueryResult::add_attrmetalist() {
  // @@protoc_insertion_point(field_add:QueryResult.attrmetalist)
  return attrmetalist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::QueryResult_AttrMeta >&
QueryResult::attrmetalist() const {
  // @@protoc_insertion_point(field_list:QueryResult.attrmetalist)
  return attrmetalist_;
}
inline ::google::protobuf::RepeatedPtrField< ::QueryResult_AttrMeta >*
QueryResult::mutable_attrmetalist() {
  // @@protoc_insertion_point(field_mutable_list:QueryResult.attrmetalist)
  return &attrmetalist_;
}

// repeated .QueryResult.Record recordlist = 5;
inline int QueryResult::recordlist_size() const {
  return recordlist_.size();
}
inline void QueryResult::clear_recordlist() {
  recordlist_.Clear();
}
inline const ::QueryResult_Record& QueryResult::recordlist(int index) const {
  // @@protoc_insertion_point(field_get:QueryResult.recordlist)
  return recordlist_.Get(index);
}
inline ::QueryResult_Record* QueryResult::mutable_recordlist(int index) {
  // @@protoc_insertion_point(field_mutable:QueryResult.recordlist)
  return recordlist_.Mutable(index);
}
inline ::QueryResult_Record* QueryResult::add_recordlist() {
  // @@protoc_insertion_point(field_add:QueryResult.recordlist)
  return recordlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::QueryResult_Record >&
QueryResult::recordlist() const {
  // @@protoc_insertion_point(field_list:QueryResult.recordlist)
  return recordlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::QueryResult_Record >*
QueryResult::mutable_recordlist() {
  // @@protoc_insertion_point(field_mutable_list:QueryResult.recordlist)
  return &recordlist_;
}

// -------------------------------------------------------------------

// IndexDebugInfo

// required string host = 1;
inline bool IndexDebugInfo::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndexDebugInfo::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndexDebugInfo::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndexDebugInfo::clear_host() {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& IndexDebugInfo::host() const {
  // @@protoc_insertion_point(field_get:IndexDebugInfo.host)
  return *host_;
}
inline void IndexDebugInfo::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(value);
  // @@protoc_insertion_point(field_set:IndexDebugInfo.host)
}
inline void IndexDebugInfo::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(value);
  // @@protoc_insertion_point(field_set_char:IndexDebugInfo.host)
}
inline void IndexDebugInfo::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IndexDebugInfo.host)
}
inline ::std::string* IndexDebugInfo::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IndexDebugInfo.host)
  return host_;
}
inline ::std::string* IndexDebugInfo::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndexDebugInfo::set_allocated_host(::std::string* host) {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_;
  }
  if (host) {
    set_has_host();
    host_ = host;
  } else {
    clear_has_host();
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IndexDebugInfo.host)
}

// optional uint64 cost = 2;
inline bool IndexDebugInfo::has_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndexDebugInfo::set_has_cost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndexDebugInfo::clear_has_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndexDebugInfo::clear_cost() {
  cost_ = GOOGLE_ULONGLONG(0);
  clear_has_cost();
}
inline ::google::protobuf::uint64 IndexDebugInfo::cost() const {
  // @@protoc_insertion_point(field_get:IndexDebugInfo.cost)
  return cost_;
}
inline void IndexDebugInfo::set_cost(::google::protobuf::uint64 value) {
  set_has_cost();
  cost_ = value;
  // @@protoc_insertion_point(field_set:IndexDebugInfo.cost)
}

// optional bytes querystr = 3;
inline bool IndexDebugInfo::has_querystr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndexDebugInfo::set_has_querystr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndexDebugInfo::clear_has_querystr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndexDebugInfo::clear_querystr() {
  if (querystr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    querystr_->clear();
  }
  clear_has_querystr();
}
inline const ::std::string& IndexDebugInfo::querystr() const {
  // @@protoc_insertion_point(field_get:IndexDebugInfo.querystr)
  return *querystr_;
}
inline void IndexDebugInfo::set_querystr(const ::std::string& value) {
  set_has_querystr();
  if (querystr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    querystr_ = new ::std::string;
  }
  querystr_->assign(value);
  // @@protoc_insertion_point(field_set:IndexDebugInfo.querystr)
}
inline void IndexDebugInfo::set_querystr(const char* value) {
  set_has_querystr();
  if (querystr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    querystr_ = new ::std::string;
  }
  querystr_->assign(value);
  // @@protoc_insertion_point(field_set_char:IndexDebugInfo.querystr)
}
inline void IndexDebugInfo::set_querystr(const void* value, size_t size) {
  set_has_querystr();
  if (querystr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    querystr_ = new ::std::string;
  }
  querystr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IndexDebugInfo.querystr)
}
inline ::std::string* IndexDebugInfo::mutable_querystr() {
  set_has_querystr();
  if (querystr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    querystr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IndexDebugInfo.querystr)
  return querystr_;
}
inline ::std::string* IndexDebugInfo::release_querystr() {
  clear_has_querystr();
  if (querystr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = querystr_;
    querystr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndexDebugInfo::set_allocated_querystr(::std::string* querystr) {
  if (querystr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete querystr_;
  }
  if (querystr) {
    set_has_querystr();
    querystr_ = querystr;
  } else {
    clear_has_querystr();
    querystr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IndexDebugInfo.querystr)
}

// -------------------------------------------------------------------

// IndexQueryRes

// required .QueryResult result = 1;
inline bool IndexQueryRes::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndexQueryRes::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndexQueryRes::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndexQueryRes::clear_result() {
  if (result_ != NULL) result_->::QueryResult::Clear();
  clear_has_result();
}
inline const ::QueryResult& IndexQueryRes::result() const {
  // @@protoc_insertion_point(field_get:IndexQueryRes.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::QueryResult* IndexQueryRes::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::QueryResult;
  // @@protoc_insertion_point(field_mutable:IndexQueryRes.result)
  return result_;
}
inline ::QueryResult* IndexQueryRes::release_result() {
  clear_has_result();
  ::QueryResult* temp = result_;
  result_ = NULL;
  return temp;
}
inline void IndexQueryRes::set_allocated_result(::QueryResult* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:IndexQueryRes.result)
}

// optional .IndexDebugInfo debuginfo = 2;
inline bool IndexQueryRes::has_debuginfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndexQueryRes::set_has_debuginfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndexQueryRes::clear_has_debuginfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndexQueryRes::clear_debuginfo() {
  if (debuginfo_ != NULL) debuginfo_->::IndexDebugInfo::Clear();
  clear_has_debuginfo();
}
inline const ::IndexDebugInfo& IndexQueryRes::debuginfo() const {
  // @@protoc_insertion_point(field_get:IndexQueryRes.debuginfo)
  return debuginfo_ != NULL ? *debuginfo_ : *default_instance_->debuginfo_;
}
inline ::IndexDebugInfo* IndexQueryRes::mutable_debuginfo() {
  set_has_debuginfo();
  if (debuginfo_ == NULL) debuginfo_ = new ::IndexDebugInfo;
  // @@protoc_insertion_point(field_mutable:IndexQueryRes.debuginfo)
  return debuginfo_;
}
inline ::IndexDebugInfo* IndexQueryRes::release_debuginfo() {
  clear_has_debuginfo();
  ::IndexDebugInfo* temp = debuginfo_;
  debuginfo_ = NULL;
  return temp;
}
inline void IndexQueryRes::set_allocated_debuginfo(::IndexDebugInfo* debuginfo) {
  delete debuginfo_;
  debuginfo_ = debuginfo;
  if (debuginfo) {
    set_has_debuginfo();
  } else {
    clear_has_debuginfo();
  }
  // @@protoc_insertion_point(field_set_allocated:IndexQueryRes.debuginfo)
}

// repeated .MapStruct exinfo = 100;
inline int IndexQueryRes::exinfo_size() const {
  return exinfo_.size();
}
inline void IndexQueryRes::clear_exinfo() {
  exinfo_.Clear();
}
inline const ::MapStruct& IndexQueryRes::exinfo(int index) const {
  // @@protoc_insertion_point(field_get:IndexQueryRes.exinfo)
  return exinfo_.Get(index);
}
inline ::MapStruct* IndexQueryRes::mutable_exinfo(int index) {
  // @@protoc_insertion_point(field_mutable:IndexQueryRes.exinfo)
  return exinfo_.Mutable(index);
}
inline ::MapStruct* IndexQueryRes::add_exinfo() {
  // @@protoc_insertion_point(field_add:IndexQueryRes.exinfo)
  return exinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MapStruct >&
IndexQueryRes::exinfo() const {
  // @@protoc_insertion_point(field_list:IndexQueryRes.exinfo)
  return exinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::MapStruct >*
IndexQueryRes::mutable_exinfo() {
  // @@protoc_insertion_point(field_mutable_list:IndexQueryRes.exinfo)
  return &exinfo_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bs_2eproto__INCLUDED
