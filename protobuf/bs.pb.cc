// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MapStruct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapStruct_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexQuery_Filter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexQuery_Filter_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexQuery_Combiner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexQuery_Combiner_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexQuery_Ranker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexQuery_Ranker_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexQuery_FieldWeight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexQuery_FieldWeight_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexQuery_GeoAnchor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexQuery_GeoAnchor_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexQueryReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexQueryReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryResult_AttrMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResult_AttrMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryResult_Record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResult_Record_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexDebugInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexDebugInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexQueryRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexQueryRes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_bs_2eproto() {
  protobuf_AddDesc_bs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bs.proto");
  GOOGLE_CHECK(file != NULL);
  MapStruct_descriptor_ = file->message_type(0);
  static const int MapStruct_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapStruct, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapStruct, value_),
  };
  MapStruct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapStruct_descriptor_,
      MapStruct::default_instance_,
      MapStruct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapStruct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapStruct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapStruct));
  IndexQuery_descriptor_ = file->message_type(1);
  static const int IndexQuery_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery, qid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery, indexname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery, querystr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery, debug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery, filterlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery, combiner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery, ranker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery, selectattrlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery, indexweight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery, fieldweightlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery, geo_anchor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery, limit_attr_),
  };
  IndexQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndexQuery_descriptor_,
      IndexQuery::default_instance_,
      IndexQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndexQuery));
  IndexQuery_Filter_descriptor_ = IndexQuery_descriptor_->nested_type(0);
  static const int IndexQuery_Filter_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Filter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Filter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Filter, exclude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Filter, min_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Filter, max_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Filter, f_min_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Filter, f_max_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Filter, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Filter, values_),
  };
  IndexQuery_Filter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndexQuery_Filter_descriptor_,
      IndexQuery_Filter::default_instance_,
      IndexQuery_Filter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Filter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Filter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndexQuery_Filter));
  IndexQuery_Combiner_descriptor_ = IndexQuery_descriptor_->nested_type(1);
  static const int IndexQuery_Combiner_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Combiner, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Combiner, groupby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Combiner, groupsort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Combiner, content_),
  };
  IndexQuery_Combiner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndexQuery_Combiner_descriptor_,
      IndexQuery_Combiner::default_instance_,
      IndexQuery_Combiner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Combiner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Combiner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndexQuery_Combiner));
  IndexQuery_Ranker_descriptor_ = IndexQuery_descriptor_->nested_type(2);
  static const int IndexQuery_Ranker_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Ranker, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Ranker, content_),
  };
  IndexQuery_Ranker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndexQuery_Ranker_descriptor_,
      IndexQuery_Ranker::default_instance_,
      IndexQuery_Ranker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Ranker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_Ranker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndexQuery_Ranker));
  IndexQuery_FieldWeight_descriptor_ = IndexQuery_descriptor_->nested_type(3);
  static const int IndexQuery_FieldWeight_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_FieldWeight, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_FieldWeight, weight_),
  };
  IndexQuery_FieldWeight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndexQuery_FieldWeight_descriptor_,
      IndexQuery_FieldWeight::default_instance_,
      IndexQuery_FieldWeight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_FieldWeight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_FieldWeight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndexQuery_FieldWeight));
  IndexQuery_GeoAnchor_descriptor_ = IndexQuery_descriptor_->nested_type(4);
  static const int IndexQuery_GeoAnchor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_GeoAnchor, latitude_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_GeoAnchor, longitude_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_GeoAnchor, latitude_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_GeoAnchor, longitude_value_),
  };
  IndexQuery_GeoAnchor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndexQuery_GeoAnchor_descriptor_,
      IndexQuery_GeoAnchor::default_instance_,
      IndexQuery_GeoAnchor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_GeoAnchor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQuery_GeoAnchor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndexQuery_GeoAnchor));
  IndexQueryReq_descriptor_ = file->message_type(2);
  static const int IndexQueryReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQueryReq, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQueryReq, queryanalysisinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQueryReq, exinfo_),
  };
  IndexQueryReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndexQueryReq_descriptor_,
      IndexQueryReq::default_instance_,
      IndexQueryReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQueryReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQueryReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndexQueryReq));
  QueryResult_descriptor_ = file->message_type(3);
  static const int QueryResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, qid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, attrmetalist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, recordlist_),
  };
  QueryResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryResult_descriptor_,
      QueryResult::default_instance_,
      QueryResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryResult));
  QueryResult_AttrMeta_descriptor_ = QueryResult_descriptor_->nested_type(0);
  static const int QueryResult_AttrMeta_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_AttrMeta, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_AttrMeta, name_),
  };
  QueryResult_AttrMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryResult_AttrMeta_descriptor_,
      QueryResult_AttrMeta::default_instance_,
      QueryResult_AttrMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_AttrMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_AttrMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryResult_AttrMeta));
  QueryResult_Record_descriptor_ = QueryResult_descriptor_->nested_type(1);
  static const int QueryResult_Record_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Record, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Record, attrdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Record, userdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Record, weight_),
  };
  QueryResult_Record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryResult_Record_descriptor_,
      QueryResult_Record::default_instance_,
      QueryResult_Record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryResult_Record));
  IndexDebugInfo_descriptor_ = file->message_type(4);
  static const int IndexDebugInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexDebugInfo, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexDebugInfo, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexDebugInfo, querystr_),
  };
  IndexDebugInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndexDebugInfo_descriptor_,
      IndexDebugInfo::default_instance_,
      IndexDebugInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexDebugInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexDebugInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndexDebugInfo));
  IndexQueryRes_descriptor_ = file->message_type(5);
  static const int IndexQueryRes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQueryRes, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQueryRes, debuginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQueryRes, exinfo_),
  };
  IndexQueryRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndexQueryRes_descriptor_,
      IndexQueryRes::default_instance_,
      IndexQueryRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQueryRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexQueryRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndexQueryRes));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapStruct_descriptor_, &MapStruct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndexQuery_descriptor_, &IndexQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndexQuery_Filter_descriptor_, &IndexQuery_Filter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndexQuery_Combiner_descriptor_, &IndexQuery_Combiner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndexQuery_Ranker_descriptor_, &IndexQuery_Ranker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndexQuery_FieldWeight_descriptor_, &IndexQuery_FieldWeight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndexQuery_GeoAnchor_descriptor_, &IndexQuery_GeoAnchor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndexQueryReq_descriptor_, &IndexQueryReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryResult_descriptor_, &QueryResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryResult_AttrMeta_descriptor_, &QueryResult_AttrMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryResult_Record_descriptor_, &QueryResult_Record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndexDebugInfo_descriptor_, &IndexDebugInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndexQueryRes_descriptor_, &IndexQueryRes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bs_2eproto() {
  delete MapStruct::default_instance_;
  delete MapStruct_reflection_;
  delete IndexQuery::default_instance_;
  delete IndexQuery_reflection_;
  delete IndexQuery_Filter::default_instance_;
  delete IndexQuery_Filter_reflection_;
  delete IndexQuery_Combiner::default_instance_;
  delete IndexQuery_Combiner_reflection_;
  delete IndexQuery_Ranker::default_instance_;
  delete IndexQuery_Ranker_reflection_;
  delete IndexQuery_FieldWeight::default_instance_;
  delete IndexQuery_FieldWeight_reflection_;
  delete IndexQuery_GeoAnchor::default_instance_;
  delete IndexQuery_GeoAnchor_reflection_;
  delete IndexQueryReq::default_instance_;
  delete IndexQueryReq_reflection_;
  delete QueryResult::default_instance_;
  delete QueryResult_reflection_;
  delete QueryResult_AttrMeta::default_instance_;
  delete QueryResult_AttrMeta_reflection_;
  delete QueryResult_Record::default_instance_;
  delete QueryResult_Record_reflection_;
  delete IndexDebugInfo::default_instance_;
  delete IndexDebugInfo_reflection_;
  delete IndexQueryRes::default_instance_;
  delete IndexQueryRes_reflection_;
}

void protobuf_AddDesc_bs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010bs.proto\"\'\n\tMapStruct\022\013\n\003key\030\001 \002(\t\022\r\n\005"
    "value\030\002 \002(\t\"\312\006\n\nIndexQuery\022\017\n\007version\030\001 "
    "\002(\r\022\013\n\003qid\030\002 \002(\t\022\016\n\006offset\030\003 \002(\r\022\r\n\005limi"
    "t\030\004 \002(\r\022\021\n\tindexname\030\005 \002(\t\022\020\n\010querystr\030\006"
    " \001(\014\022\r\n\005debug\030\007 \001(\010\022&\n\nfilterlist\030\010 \003(\0132"
    "\022.IndexQuery.Filter\022&\n\010combiner\030\t \001(\0132\024."
    "IndexQuery.Combiner\022\"\n\006ranker\030\n \001(\0132\022.In"
    "dexQuery.Ranker\022\026\n\016selectattrlist\030\013 \003(\t\022"
    "\023\n\013indexweight\030\014 \001(\r\0220\n\017fieldweightlist\030"
    "\r \003(\0132\027.IndexQuery.FieldWeight\022)\n\ngeo_an"
    "chor\030\016 \001(\0132\025.IndexQuery.GeoAnchor\022\022\n\nlim"
    "it_attr\030\017 \001(\t\032\246\001\n\006Filter\022\014\n\004type\030\001 \002(\r\022\014"
    "\n\004name\030\002 \001(\t\022\017\n\007exclude\030\003 \001(\010\022\021\n\tmin_val"
    "ue\030\004 \001(\004\022\021\n\tmax_value\030\005 \001(\004\022\023\n\013f_min_val"
    "ue\030\006 \001(\002\022\023\n\013f_max_value\030\007 \001(\002\022\017\n\007content"
    "\030\010 \001(\014\022\016\n\006values\030\t \003(\004\032M\n\010Combiner\022\014\n\004ty"
    "pe\030\001 \002(\r\022\017\n\007groupby\030\002 \001(\t\022\021\n\tgroupsort\030\003"
    " \001(\t\022\017\n\007content\030\004 \001(\014\032\'\n\006Ranker\022\014\n\004type\030"
    "\001 \002(\r\022\017\n\007content\030\002 \002(\014\032+\n\013FieldWeight\022\014\n"
    "\004name\030\001 \002(\t\022\016\n\006weight\030\002 \002(\r\032k\n\tGeoAnchor"
    "\022\025\n\rlatitude_name\030\001 \002(\t\022\026\n\016longitude_nam"
    "e\030\002 \002(\t\022\026\n\016latitude_value\030\003 \002(\001\022\027\n\017longi"
    "tude_value\030\004 \002(\001\"b\n\rIndexQueryReq\022\032\n\005que"
    "ry\030\001 \002(\0132\013.IndexQuery\022\031\n\021QueryAnalysisIn"
    "fo\030\002 \001(\t\022\032\n\006exinfo\030d \003(\0132\n.MapStruct\"\377\001\n"
    "\013QueryResult\022\016\n\006status\030\001 \002(\r\022\013\n\003qid\030\002 \002("
    "\t\022\013\n\003tag\030\003 \001(\t\022+\n\014attrmetalist\030\004 \003(\0132\025.Q"
    "ueryResult.AttrMeta\022\'\n\nrecordlist\030\005 \003(\0132"
    "\023.QueryResult.Record\032&\n\010AttrMeta\022\014\n\004type"
    "\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\032H\n\006Record\022\n\n\002id\030\001 \002"
    "(\004\022\020\n\010attrdata\030\002 \001(\014\022\020\n\010userdata\030\003 \001(\014\022\016"
    "\n\006weight\030\004 \001(\002\">\n\016IndexDebugInfo\022\014\n\004host"
    "\030\001 \002(\t\022\014\n\004cost\030\002 \001(\004\022\020\n\010querystr\030\003 \001(\014\"m"
    "\n\rIndexQueryRes\022\034\n\006result\030\001 \002(\0132\014.QueryR"
    "esult\022\"\n\tdebuginfo\030\002 \001(\0132\017.IndexDebugInf"
    "o\022\032\n\006exinfo\030d \003(\0132\n.MapStruct", 1429);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bs.proto", &protobuf_RegisterTypes);
  MapStruct::default_instance_ = new MapStruct();
  IndexQuery::default_instance_ = new IndexQuery();
  IndexQuery_Filter::default_instance_ = new IndexQuery_Filter();
  IndexQuery_Combiner::default_instance_ = new IndexQuery_Combiner();
  IndexQuery_Ranker::default_instance_ = new IndexQuery_Ranker();
  IndexQuery_FieldWeight::default_instance_ = new IndexQuery_FieldWeight();
  IndexQuery_GeoAnchor::default_instance_ = new IndexQuery_GeoAnchor();
  IndexQueryReq::default_instance_ = new IndexQueryReq();
  QueryResult::default_instance_ = new QueryResult();
  QueryResult_AttrMeta::default_instance_ = new QueryResult_AttrMeta();
  QueryResult_Record::default_instance_ = new QueryResult_Record();
  IndexDebugInfo::default_instance_ = new IndexDebugInfo();
  IndexQueryRes::default_instance_ = new IndexQueryRes();
  MapStruct::default_instance_->InitAsDefaultInstance();
  IndexQuery::default_instance_->InitAsDefaultInstance();
  IndexQuery_Filter::default_instance_->InitAsDefaultInstance();
  IndexQuery_Combiner::default_instance_->InitAsDefaultInstance();
  IndexQuery_Ranker::default_instance_->InitAsDefaultInstance();
  IndexQuery_FieldWeight::default_instance_->InitAsDefaultInstance();
  IndexQuery_GeoAnchor::default_instance_->InitAsDefaultInstance();
  IndexQueryReq::default_instance_->InitAsDefaultInstance();
  QueryResult::default_instance_->InitAsDefaultInstance();
  QueryResult_AttrMeta::default_instance_->InitAsDefaultInstance();
  QueryResult_Record::default_instance_->InitAsDefaultInstance();
  IndexDebugInfo::default_instance_->InitAsDefaultInstance();
  IndexQueryRes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bs_2eproto {
  StaticDescriptorInitializer_bs_2eproto() {
    protobuf_AddDesc_bs_2eproto();
  }
} static_descriptor_initializer_bs_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MapStruct::kKeyFieldNumber;
const int MapStruct::kValueFieldNumber;
#endif  // !_MSC_VER

MapStruct::MapStruct()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MapStruct)
}

void MapStruct::InitAsDefaultInstance() {
}

MapStruct::MapStruct(const MapStruct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MapStruct)
}

void MapStruct::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapStruct::~MapStruct() {
  // @@protoc_insertion_point(destructor:MapStruct)
  SharedDtor();
}

void MapStruct::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void MapStruct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapStruct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapStruct_descriptor_;
}

const MapStruct& MapStruct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bs_2eproto();
  return *default_instance_;
}

MapStruct* MapStruct::default_instance_ = NULL;

MapStruct* MapStruct::New() const {
  return new MapStruct;
}

void MapStruct::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MapStruct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MapStruct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MapStruct)
  return false;
#undef DO_
}

void MapStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MapStruct)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MapStruct)
}

::google::protobuf::uint8* MapStruct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MapStruct)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MapStruct)
  return target;
}

int MapStruct::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapStruct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapStruct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapStruct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapStruct::MergeFrom(const MapStruct& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapStruct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapStruct::CopyFrom(const MapStruct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapStruct::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MapStruct::Swap(MapStruct* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapStruct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapStruct_descriptor_;
  metadata.reflection = MapStruct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndexQuery_Filter::kTypeFieldNumber;
const int IndexQuery_Filter::kNameFieldNumber;
const int IndexQuery_Filter::kExcludeFieldNumber;
const int IndexQuery_Filter::kMinValueFieldNumber;
const int IndexQuery_Filter::kMaxValueFieldNumber;
const int IndexQuery_Filter::kFMinValueFieldNumber;
const int IndexQuery_Filter::kFMaxValueFieldNumber;
const int IndexQuery_Filter::kContentFieldNumber;
const int IndexQuery_Filter::kValuesFieldNumber;
#endif  // !_MSC_VER

IndexQuery_Filter::IndexQuery_Filter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndexQuery.Filter)
}

void IndexQuery_Filter::InitAsDefaultInstance() {
}

IndexQuery_Filter::IndexQuery_Filter(const IndexQuery_Filter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IndexQuery.Filter)
}

void IndexQuery_Filter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exclude_ = false;
  min_value_ = GOOGLE_ULONGLONG(0);
  max_value_ = GOOGLE_ULONGLONG(0);
  f_min_value_ = 0;
  f_max_value_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexQuery_Filter::~IndexQuery_Filter() {
  // @@protoc_insertion_point(destructor:IndexQuery.Filter)
  SharedDtor();
}

void IndexQuery_Filter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void IndexQuery_Filter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexQuery_Filter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexQuery_Filter_descriptor_;
}

const IndexQuery_Filter& IndexQuery_Filter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bs_2eproto();
  return *default_instance_;
}

IndexQuery_Filter* IndexQuery_Filter::default_instance_ = NULL;

IndexQuery_Filter* IndexQuery_Filter::New() const {
  return new IndexQuery_Filter;
}

void IndexQuery_Filter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndexQuery_Filter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(type_, f_max_value_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndexQuery_Filter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndexQuery.Filter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exclude;
        break;
      }

      // optional bool exclude = 3;
      case 3: {
        if (tag == 24) {
         parse_exclude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exclude_)));
          set_has_exclude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_min_value;
        break;
      }

      // optional uint64 min_value = 4;
      case 4: {
        if (tag == 32) {
         parse_min_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_value_)));
          set_has_min_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_max_value;
        break;
      }

      // optional uint64 max_value = 5;
      case 5: {
        if (tag == 40) {
         parse_max_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_value_)));
          set_has_max_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_f_min_value;
        break;
      }

      // optional float f_min_value = 6;
      case 6: {
        if (tag == 53) {
         parse_f_min_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f_min_value_)));
          set_has_f_min_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_f_max_value;
        break;
      }

      // optional float f_max_value = 7;
      case 7: {
        if (tag == 61) {
         parse_f_max_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f_max_value_)));
          set_has_f_max_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_content;
        break;
      }

      // optional bytes content = 8;
      case 8: {
        if (tag == 66) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_values;
        break;
      }

      // repeated uint64 values = 9;
      case 9: {
        if (tag == 72) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 72, input, this->mutable_values())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_values;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndexQuery.Filter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndexQuery.Filter)
  return false;
#undef DO_
}

void IndexQuery_Filter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndexQuery.Filter)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional bool exclude = 3;
  if (has_exclude()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->exclude(), output);
  }

  // optional uint64 min_value = 4;
  if (has_min_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->min_value(), output);
  }

  // optional uint64 max_value = 5;
  if (has_max_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->max_value(), output);
  }

  // optional float f_min_value = 6;
  if (has_f_min_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->f_min_value(), output);
  }

  // optional float f_max_value = 7;
  if (has_f_max_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->f_max_value(), output);
  }

  // optional bytes content = 8;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->content(), output);
  }

  // repeated uint64 values = 9;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      9, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndexQuery.Filter)
}

::google::protobuf::uint8* IndexQuery_Filter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndexQuery.Filter)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional bool exclude = 3;
  if (has_exclude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->exclude(), target);
  }

  // optional uint64 min_value = 4;
  if (has_min_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->min_value(), target);
  }

  // optional uint64 max_value = 5;
  if (has_max_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->max_value(), target);
  }

  // optional float f_min_value = 6;
  if (has_f_min_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->f_min_value(), target);
  }

  // optional float f_max_value = 7;
  if (has_f_max_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->f_max_value(), target);
  }

  // optional bytes content = 8;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->content(), target);
  }

  // repeated uint64 values = 9;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(9, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndexQuery.Filter)
  return target;
}

int IndexQuery_Filter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool exclude = 3;
    if (has_exclude()) {
      total_size += 1 + 1;
    }

    // optional uint64 min_value = 4;
    if (has_min_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->min_value());
    }

    // optional uint64 max_value = 5;
    if (has_max_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_value());
    }

    // optional float f_min_value = 6;
    if (has_f_min_value()) {
      total_size += 1 + 4;
    }

    // optional float f_max_value = 7;
    if (has_f_max_value()) {
      total_size += 1 + 4;
    }

    // optional bytes content = 8;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  // repeated uint64 values = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->values(i));
    }
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexQuery_Filter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndexQuery_Filter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndexQuery_Filter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexQuery_Filter::MergeFrom(const IndexQuery_Filter& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_exclude()) {
      set_exclude(from.exclude());
    }
    if (from.has_min_value()) {
      set_min_value(from.min_value());
    }
    if (from.has_max_value()) {
      set_max_value(from.max_value());
    }
    if (from.has_f_min_value()) {
      set_f_min_value(from.f_min_value());
    }
    if (from.has_f_max_value()) {
      set_f_max_value(from.f_max_value());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndexQuery_Filter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexQuery_Filter::CopyFrom(const IndexQuery_Filter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexQuery_Filter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IndexQuery_Filter::Swap(IndexQuery_Filter* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(exclude_, other->exclude_);
    std::swap(min_value_, other->min_value_);
    std::swap(max_value_, other->max_value_);
    std::swap(f_min_value_, other->f_min_value_);
    std::swap(f_max_value_, other->f_max_value_);
    std::swap(content_, other->content_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndexQuery_Filter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexQuery_Filter_descriptor_;
  metadata.reflection = IndexQuery_Filter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndexQuery_Combiner::kTypeFieldNumber;
const int IndexQuery_Combiner::kGroupbyFieldNumber;
const int IndexQuery_Combiner::kGroupsortFieldNumber;
const int IndexQuery_Combiner::kContentFieldNumber;
#endif  // !_MSC_VER

IndexQuery_Combiner::IndexQuery_Combiner()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndexQuery.Combiner)
}

void IndexQuery_Combiner::InitAsDefaultInstance() {
}

IndexQuery_Combiner::IndexQuery_Combiner(const IndexQuery_Combiner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IndexQuery.Combiner)
}

void IndexQuery_Combiner::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0u;
  groupby_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupsort_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexQuery_Combiner::~IndexQuery_Combiner() {
  // @@protoc_insertion_point(destructor:IndexQuery.Combiner)
  SharedDtor();
}

void IndexQuery_Combiner::SharedDtor() {
  if (groupby_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groupby_;
  }
  if (groupsort_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groupsort_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void IndexQuery_Combiner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexQuery_Combiner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexQuery_Combiner_descriptor_;
}

const IndexQuery_Combiner& IndexQuery_Combiner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bs_2eproto();
  return *default_instance_;
}

IndexQuery_Combiner* IndexQuery_Combiner::default_instance_ = NULL;

IndexQuery_Combiner* IndexQuery_Combiner::New() const {
  return new IndexQuery_Combiner;
}

void IndexQuery_Combiner::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    type_ = 0u;
    if (has_groupby()) {
      if (groupby_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        groupby_->clear();
      }
    }
    if (has_groupsort()) {
      if (groupsort_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        groupsort_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndexQuery_Combiner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndexQuery.Combiner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_groupby;
        break;
      }

      // optional string groupby = 2;
      case 2: {
        if (tag == 18) {
         parse_groupby:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupby()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupby().data(), this->groupby().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "groupby");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_groupsort;
        break;
      }

      // optional string groupsort = 3;
      case 3: {
        if (tag == 26) {
         parse_groupsort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupsort()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupsort().data(), this->groupsort().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "groupsort");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional bytes content = 4;
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndexQuery.Combiner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndexQuery.Combiner)
  return false;
#undef DO_
}

void IndexQuery_Combiner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndexQuery.Combiner)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional string groupby = 2;
  if (has_groupby()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupby().data(), this->groupby().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupby");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupby(), output);
  }

  // optional string groupsort = 3;
  if (has_groupsort()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupsort().data(), this->groupsort().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupsort");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->groupsort(), output);
  }

  // optional bytes content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndexQuery.Combiner)
}

::google::protobuf::uint8* IndexQuery_Combiner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndexQuery.Combiner)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional string groupby = 2;
  if (has_groupby()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupby().data(), this->groupby().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupby");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupby(), target);
  }

  // optional string groupsort = 3;
  if (has_groupsort()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupsort().data(), this->groupsort().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupsort");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->groupsort(), target);
  }

  // optional bytes content = 4;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndexQuery.Combiner)
  return target;
}

int IndexQuery_Combiner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string groupby = 2;
    if (has_groupby()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupby());
    }

    // optional string groupsort = 3;
    if (has_groupsort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupsort());
    }

    // optional bytes content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexQuery_Combiner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndexQuery_Combiner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndexQuery_Combiner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexQuery_Combiner::MergeFrom(const IndexQuery_Combiner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_groupby()) {
      set_groupby(from.groupby());
    }
    if (from.has_groupsort()) {
      set_groupsort(from.groupsort());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndexQuery_Combiner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexQuery_Combiner::CopyFrom(const IndexQuery_Combiner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexQuery_Combiner::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IndexQuery_Combiner::Swap(IndexQuery_Combiner* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(groupby_, other->groupby_);
    std::swap(groupsort_, other->groupsort_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndexQuery_Combiner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexQuery_Combiner_descriptor_;
  metadata.reflection = IndexQuery_Combiner_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndexQuery_Ranker::kTypeFieldNumber;
const int IndexQuery_Ranker::kContentFieldNumber;
#endif  // !_MSC_VER

IndexQuery_Ranker::IndexQuery_Ranker()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndexQuery.Ranker)
}

void IndexQuery_Ranker::InitAsDefaultInstance() {
}

IndexQuery_Ranker::IndexQuery_Ranker(const IndexQuery_Ranker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IndexQuery.Ranker)
}

void IndexQuery_Ranker::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexQuery_Ranker::~IndexQuery_Ranker() {
  // @@protoc_insertion_point(destructor:IndexQuery.Ranker)
  SharedDtor();
}

void IndexQuery_Ranker::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void IndexQuery_Ranker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexQuery_Ranker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexQuery_Ranker_descriptor_;
}

const IndexQuery_Ranker& IndexQuery_Ranker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bs_2eproto();
  return *default_instance_;
}

IndexQuery_Ranker* IndexQuery_Ranker::default_instance_ = NULL;

IndexQuery_Ranker* IndexQuery_Ranker::New() const {
  return new IndexQuery_Ranker;
}

void IndexQuery_Ranker::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndexQuery_Ranker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndexQuery.Ranker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // required bytes content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndexQuery.Ranker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndexQuery.Ranker)
  return false;
#undef DO_
}

void IndexQuery_Ranker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndexQuery.Ranker)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required bytes content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndexQuery.Ranker)
}

::google::protobuf::uint8* IndexQuery_Ranker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndexQuery.Ranker)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required bytes content = 2;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndexQuery.Ranker)
  return target;
}

int IndexQuery_Ranker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required bytes content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexQuery_Ranker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndexQuery_Ranker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndexQuery_Ranker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexQuery_Ranker::MergeFrom(const IndexQuery_Ranker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndexQuery_Ranker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexQuery_Ranker::CopyFrom(const IndexQuery_Ranker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexQuery_Ranker::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IndexQuery_Ranker::Swap(IndexQuery_Ranker* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndexQuery_Ranker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexQuery_Ranker_descriptor_;
  metadata.reflection = IndexQuery_Ranker_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndexQuery_FieldWeight::kNameFieldNumber;
const int IndexQuery_FieldWeight::kWeightFieldNumber;
#endif  // !_MSC_VER

IndexQuery_FieldWeight::IndexQuery_FieldWeight()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndexQuery.FieldWeight)
}

void IndexQuery_FieldWeight::InitAsDefaultInstance() {
}

IndexQuery_FieldWeight::IndexQuery_FieldWeight(const IndexQuery_FieldWeight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IndexQuery.FieldWeight)
}

void IndexQuery_FieldWeight::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexQuery_FieldWeight::~IndexQuery_FieldWeight() {
  // @@protoc_insertion_point(destructor:IndexQuery.FieldWeight)
  SharedDtor();
}

void IndexQuery_FieldWeight::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void IndexQuery_FieldWeight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexQuery_FieldWeight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexQuery_FieldWeight_descriptor_;
}

const IndexQuery_FieldWeight& IndexQuery_FieldWeight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bs_2eproto();
  return *default_instance_;
}

IndexQuery_FieldWeight* IndexQuery_FieldWeight::default_instance_ = NULL;

IndexQuery_FieldWeight* IndexQuery_FieldWeight::New() const {
  return new IndexQuery_FieldWeight;
}

void IndexQuery_FieldWeight::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    weight_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndexQuery_FieldWeight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndexQuery.FieldWeight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_weight;
        break;
      }

      // required uint32 weight = 2;
      case 2: {
        if (tag == 16) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndexQuery.FieldWeight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndexQuery.FieldWeight)
  return false;
#undef DO_
}

void IndexQuery_FieldWeight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndexQuery.FieldWeight)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required uint32 weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndexQuery.FieldWeight)
}

::google::protobuf::uint8* IndexQuery_FieldWeight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndexQuery.FieldWeight)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndexQuery.FieldWeight)
  return target;
}

int IndexQuery_FieldWeight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 weight = 2;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexQuery_FieldWeight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndexQuery_FieldWeight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndexQuery_FieldWeight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexQuery_FieldWeight::MergeFrom(const IndexQuery_FieldWeight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndexQuery_FieldWeight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexQuery_FieldWeight::CopyFrom(const IndexQuery_FieldWeight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexQuery_FieldWeight::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IndexQuery_FieldWeight::Swap(IndexQuery_FieldWeight* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndexQuery_FieldWeight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexQuery_FieldWeight_descriptor_;
  metadata.reflection = IndexQuery_FieldWeight_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndexQuery_GeoAnchor::kLatitudeNameFieldNumber;
const int IndexQuery_GeoAnchor::kLongitudeNameFieldNumber;
const int IndexQuery_GeoAnchor::kLatitudeValueFieldNumber;
const int IndexQuery_GeoAnchor::kLongitudeValueFieldNumber;
#endif  // !_MSC_VER

IndexQuery_GeoAnchor::IndexQuery_GeoAnchor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndexQuery.GeoAnchor)
}

void IndexQuery_GeoAnchor::InitAsDefaultInstance() {
}

IndexQuery_GeoAnchor::IndexQuery_GeoAnchor(const IndexQuery_GeoAnchor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IndexQuery.GeoAnchor)
}

void IndexQuery_GeoAnchor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  latitude_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  longitude_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latitude_value_ = 0;
  longitude_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexQuery_GeoAnchor::~IndexQuery_GeoAnchor() {
  // @@protoc_insertion_point(destructor:IndexQuery.GeoAnchor)
  SharedDtor();
}

void IndexQuery_GeoAnchor::SharedDtor() {
  if (latitude_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete latitude_name_;
  }
  if (longitude_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete longitude_name_;
  }
  if (this != default_instance_) {
  }
}

void IndexQuery_GeoAnchor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexQuery_GeoAnchor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexQuery_GeoAnchor_descriptor_;
}

const IndexQuery_GeoAnchor& IndexQuery_GeoAnchor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bs_2eproto();
  return *default_instance_;
}

IndexQuery_GeoAnchor* IndexQuery_GeoAnchor::default_instance_ = NULL;

IndexQuery_GeoAnchor* IndexQuery_GeoAnchor::New() const {
  return new IndexQuery_GeoAnchor;
}

void IndexQuery_GeoAnchor::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndexQuery_GeoAnchor*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(latitude_value_, longitude_value_);
    if (has_latitude_name()) {
      if (latitude_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        latitude_name_->clear();
      }
    }
    if (has_longitude_name()) {
      if (longitude_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        longitude_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndexQuery_GeoAnchor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndexQuery.GeoAnchor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string latitude_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latitude_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->latitude_name().data(), this->latitude_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "latitude_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_longitude_name;
        break;
      }

      // required string longitude_name = 2;
      case 2: {
        if (tag == 18) {
         parse_longitude_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_longitude_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->longitude_name().data(), this->longitude_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "longitude_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_latitude_value;
        break;
      }

      // required double latitude_value = 3;
      case 3: {
        if (tag == 25) {
         parse_latitude_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_value_)));
          set_has_latitude_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_longitude_value;
        break;
      }

      // required double longitude_value = 4;
      case 4: {
        if (tag == 33) {
         parse_longitude_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_value_)));
          set_has_longitude_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndexQuery.GeoAnchor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndexQuery.GeoAnchor)
  return false;
#undef DO_
}

void IndexQuery_GeoAnchor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndexQuery.GeoAnchor)
  // required string latitude_name = 1;
  if (has_latitude_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->latitude_name().data(), this->latitude_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "latitude_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->latitude_name(), output);
  }

  // required string longitude_name = 2;
  if (has_longitude_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->longitude_name().data(), this->longitude_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "longitude_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->longitude_name(), output);
  }

  // required double latitude_value = 3;
  if (has_latitude_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude_value(), output);
  }

  // required double longitude_value = 4;
  if (has_longitude_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndexQuery.GeoAnchor)
}

::google::protobuf::uint8* IndexQuery_GeoAnchor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndexQuery.GeoAnchor)
  // required string latitude_name = 1;
  if (has_latitude_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->latitude_name().data(), this->latitude_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "latitude_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->latitude_name(), target);
  }

  // required string longitude_name = 2;
  if (has_longitude_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->longitude_name().data(), this->longitude_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "longitude_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->longitude_name(), target);
  }

  // required double latitude_value = 3;
  if (has_latitude_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->latitude_value(), target);
  }

  // required double longitude_value = 4;
  if (has_longitude_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndexQuery.GeoAnchor)
  return target;
}

int IndexQuery_GeoAnchor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string latitude_name = 1;
    if (has_latitude_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->latitude_name());
    }

    // required string longitude_name = 2;
    if (has_longitude_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->longitude_name());
    }

    // required double latitude_value = 3;
    if (has_latitude_value()) {
      total_size += 1 + 8;
    }

    // required double longitude_value = 4;
    if (has_longitude_value()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexQuery_GeoAnchor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndexQuery_GeoAnchor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndexQuery_GeoAnchor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexQuery_GeoAnchor::MergeFrom(const IndexQuery_GeoAnchor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude_name()) {
      set_latitude_name(from.latitude_name());
    }
    if (from.has_longitude_name()) {
      set_longitude_name(from.longitude_name());
    }
    if (from.has_latitude_value()) {
      set_latitude_value(from.latitude_value());
    }
    if (from.has_longitude_value()) {
      set_longitude_value(from.longitude_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndexQuery_GeoAnchor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexQuery_GeoAnchor::CopyFrom(const IndexQuery_GeoAnchor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexQuery_GeoAnchor::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IndexQuery_GeoAnchor::Swap(IndexQuery_GeoAnchor* other) {
  if (other != this) {
    std::swap(latitude_name_, other->latitude_name_);
    std::swap(longitude_name_, other->longitude_name_);
    std::swap(latitude_value_, other->latitude_value_);
    std::swap(longitude_value_, other->longitude_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndexQuery_GeoAnchor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexQuery_GeoAnchor_descriptor_;
  metadata.reflection = IndexQuery_GeoAnchor_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndexQuery::kVersionFieldNumber;
const int IndexQuery::kQidFieldNumber;
const int IndexQuery::kOffsetFieldNumber;
const int IndexQuery::kLimitFieldNumber;
const int IndexQuery::kIndexnameFieldNumber;
const int IndexQuery::kQuerystrFieldNumber;
const int IndexQuery::kDebugFieldNumber;
const int IndexQuery::kFilterlistFieldNumber;
const int IndexQuery::kCombinerFieldNumber;
const int IndexQuery::kRankerFieldNumber;
const int IndexQuery::kSelectattrlistFieldNumber;
const int IndexQuery::kIndexweightFieldNumber;
const int IndexQuery::kFieldweightlistFieldNumber;
const int IndexQuery::kGeoAnchorFieldNumber;
const int IndexQuery::kLimitAttrFieldNumber;
#endif  // !_MSC_VER

IndexQuery::IndexQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndexQuery)
}

void IndexQuery::InitAsDefaultInstance() {
  combiner_ = const_cast< ::IndexQuery_Combiner*>(&::IndexQuery_Combiner::default_instance());
  ranker_ = const_cast< ::IndexQuery_Ranker*>(&::IndexQuery_Ranker::default_instance());
  geo_anchor_ = const_cast< ::IndexQuery_GeoAnchor*>(&::IndexQuery_GeoAnchor::default_instance());
}

IndexQuery::IndexQuery(const IndexQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IndexQuery)
}

void IndexQuery::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0u;
  qid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_ = 0u;
  limit_ = 0u;
  indexname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  querystr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  debug_ = false;
  combiner_ = NULL;
  ranker_ = NULL;
  indexweight_ = 0u;
  geo_anchor_ = NULL;
  limit_attr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexQuery::~IndexQuery() {
  // @@protoc_insertion_point(destructor:IndexQuery)
  SharedDtor();
}

void IndexQuery::SharedDtor() {
  if (qid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qid_;
  }
  if (indexname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete indexname_;
  }
  if (querystr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete querystr_;
  }
  if (limit_attr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete limit_attr_;
  }
  if (this != default_instance_) {
    delete combiner_;
    delete ranker_;
    delete geo_anchor_;
  }
}

void IndexQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexQuery_descriptor_;
}

const IndexQuery& IndexQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bs_2eproto();
  return *default_instance_;
}

IndexQuery* IndexQuery::default_instance_ = NULL;

IndexQuery* IndexQuery::New() const {
  return new IndexQuery;
}

void IndexQuery::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndexQuery*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(version_, offset_);
    ZR_(limit_, debug_);
    if (has_qid()) {
      if (qid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        qid_->clear();
      }
    }
    if (has_indexname()) {
      if (indexname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        indexname_->clear();
      }
    }
    if (has_querystr()) {
      if (querystr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        querystr_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 27392) {
    if (has_combiner()) {
      if (combiner_ != NULL) combiner_->::IndexQuery_Combiner::Clear();
    }
    if (has_ranker()) {
      if (ranker_ != NULL) ranker_->::IndexQuery_Ranker::Clear();
    }
    indexweight_ = 0u;
    if (has_geo_anchor()) {
      if (geo_anchor_ != NULL) geo_anchor_->::IndexQuery_GeoAnchor::Clear();
    }
    if (has_limit_attr()) {
      if (limit_attr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        limit_attr_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  filterlist_.Clear();
  selectattrlist_.Clear();
  fieldweightlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndexQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndexQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_qid;
        break;
      }

      // required string qid = 2;
      case 2: {
        if (tag == 18) {
         parse_qid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qid().data(), this->qid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }

      // required uint32 offset = 3;
      case 3: {
        if (tag == 24) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_limit;
        break;
      }

      // required uint32 limit = 4;
      case 4: {
        if (tag == 32) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_indexname;
        break;
      }

      // required string indexname = 5;
      case 5: {
        if (tag == 42) {
         parse_indexname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_indexname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->indexname().data(), this->indexname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "indexname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_querystr;
        break;
      }

      // optional bytes querystr = 6;
      case 6: {
        if (tag == 50) {
         parse_querystr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_querystr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_debug;
        break;
      }

      // optional bool debug = 7;
      case 7: {
        if (tag == 56) {
         parse_debug:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_)));
          set_has_debug();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_filterlist;
        break;
      }

      // repeated .IndexQuery.Filter filterlist = 8;
      case 8: {
        if (tag == 66) {
         parse_filterlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filterlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_filterlist;
        if (input->ExpectTag(74)) goto parse_combiner;
        break;
      }

      // optional .IndexQuery.Combiner combiner = 9;
      case 9: {
        if (tag == 74) {
         parse_combiner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_combiner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ranker;
        break;
      }

      // optional .IndexQuery.Ranker ranker = 10;
      case 10: {
        if (tag == 82) {
         parse_ranker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ranker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_selectattrlist;
        break;
      }

      // repeated string selectattrlist = 11;
      case 11: {
        if (tag == 90) {
         parse_selectattrlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_selectattrlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->selectattrlist(this->selectattrlist_size() - 1).data(),
            this->selectattrlist(this->selectattrlist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "selectattrlist");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_selectattrlist;
        if (input->ExpectTag(96)) goto parse_indexweight;
        break;
      }

      // optional uint32 indexweight = 12;
      case 12: {
        if (tag == 96) {
         parse_indexweight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &indexweight_)));
          set_has_indexweight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_fieldweightlist;
        break;
      }

      // repeated .IndexQuery.FieldWeight fieldweightlist = 13;
      case 13: {
        if (tag == 106) {
         parse_fieldweightlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldweightlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_fieldweightlist;
        if (input->ExpectTag(114)) goto parse_geo_anchor;
        break;
      }

      // optional .IndexQuery.GeoAnchor geo_anchor = 14;
      case 14: {
        if (tag == 114) {
         parse_geo_anchor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo_anchor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_limit_attr;
        break;
      }

      // optional string limit_attr = 15;
      case 15: {
        if (tag == 122) {
         parse_limit_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_limit_attr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->limit_attr().data(), this->limit_attr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "limit_attr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndexQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndexQuery)
  return false;
#undef DO_
}

void IndexQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndexQuery)
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // required string qid = 2;
  if (has_qid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qid().data(), this->qid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->qid(), output);
  }

  // required uint32 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->offset(), output);
  }

  // required uint32 limit = 4;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->limit(), output);
  }

  // required string indexname = 5;
  if (has_indexname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->indexname().data(), this->indexname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "indexname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->indexname(), output);
  }

  // optional bytes querystr = 6;
  if (has_querystr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->querystr(), output);
  }

  // optional bool debug = 7;
  if (has_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->debug(), output);
  }

  // repeated .IndexQuery.Filter filterlist = 8;
  for (int i = 0; i < this->filterlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->filterlist(i), output);
  }

  // optional .IndexQuery.Combiner combiner = 9;
  if (has_combiner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->combiner(), output);
  }

  // optional .IndexQuery.Ranker ranker = 10;
  if (has_ranker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->ranker(), output);
  }

  // repeated string selectattrlist = 11;
  for (int i = 0; i < this->selectattrlist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->selectattrlist(i).data(), this->selectattrlist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "selectattrlist");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->selectattrlist(i), output);
  }

  // optional uint32 indexweight = 12;
  if (has_indexweight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->indexweight(), output);
  }

  // repeated .IndexQuery.FieldWeight fieldweightlist = 13;
  for (int i = 0; i < this->fieldweightlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->fieldweightlist(i), output);
  }

  // optional .IndexQuery.GeoAnchor geo_anchor = 14;
  if (has_geo_anchor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->geo_anchor(), output);
  }

  // optional string limit_attr = 15;
  if (has_limit_attr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->limit_attr().data(), this->limit_attr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "limit_attr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->limit_attr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndexQuery)
}

::google::protobuf::uint8* IndexQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndexQuery)
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // required string qid = 2;
  if (has_qid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qid().data(), this->qid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->qid(), target);
  }

  // required uint32 offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->offset(), target);
  }

  // required uint32 limit = 4;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->limit(), target);
  }

  // required string indexname = 5;
  if (has_indexname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->indexname().data(), this->indexname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "indexname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->indexname(), target);
  }

  // optional bytes querystr = 6;
  if (has_querystr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->querystr(), target);
  }

  // optional bool debug = 7;
  if (has_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->debug(), target);
  }

  // repeated .IndexQuery.Filter filterlist = 8;
  for (int i = 0; i < this->filterlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->filterlist(i), target);
  }

  // optional .IndexQuery.Combiner combiner = 9;
  if (has_combiner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->combiner(), target);
  }

  // optional .IndexQuery.Ranker ranker = 10;
  if (has_ranker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->ranker(), target);
  }

  // repeated string selectattrlist = 11;
  for (int i = 0; i < this->selectattrlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->selectattrlist(i).data(), this->selectattrlist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "selectattrlist");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->selectattrlist(i), target);
  }

  // optional uint32 indexweight = 12;
  if (has_indexweight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->indexweight(), target);
  }

  // repeated .IndexQuery.FieldWeight fieldweightlist = 13;
  for (int i = 0; i < this->fieldweightlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->fieldweightlist(i), target);
  }

  // optional .IndexQuery.GeoAnchor geo_anchor = 14;
  if (has_geo_anchor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->geo_anchor(), target);
  }

  // optional string limit_attr = 15;
  if (has_limit_attr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->limit_attr().data(), this->limit_attr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "limit_attr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->limit_attr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndexQuery)
  return target;
}

int IndexQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // required string qid = 2;
    if (has_qid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qid());
    }

    // required uint32 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // required uint32 limit = 4;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

    // required string indexname = 5;
    if (has_indexname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->indexname());
    }

    // optional bytes querystr = 6;
    if (has_querystr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->querystr());
    }

    // optional bool debug = 7;
    if (has_debug()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .IndexQuery.Combiner combiner = 9;
    if (has_combiner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->combiner());
    }

    // optional .IndexQuery.Ranker ranker = 10;
    if (has_ranker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ranker());
    }

    // optional uint32 indexweight = 12;
    if (has_indexweight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->indexweight());
    }

    // optional .IndexQuery.GeoAnchor geo_anchor = 14;
    if (has_geo_anchor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo_anchor());
    }

    // optional string limit_attr = 15;
    if (has_limit_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->limit_attr());
    }

  }
  // repeated .IndexQuery.Filter filterlist = 8;
  total_size += 1 * this->filterlist_size();
  for (int i = 0; i < this->filterlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filterlist(i));
  }

  // repeated string selectattrlist = 11;
  total_size += 1 * this->selectattrlist_size();
  for (int i = 0; i < this->selectattrlist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->selectattrlist(i));
  }

  // repeated .IndexQuery.FieldWeight fieldweightlist = 13;
  total_size += 1 * this->fieldweightlist_size();
  for (int i = 0; i < this->fieldweightlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldweightlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndexQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndexQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexQuery::MergeFrom(const IndexQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  filterlist_.MergeFrom(from.filterlist_);
  selectattrlist_.MergeFrom(from.selectattrlist_);
  fieldweightlist_.MergeFrom(from.fieldweightlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_qid()) {
      set_qid(from.qid());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_indexname()) {
      set_indexname(from.indexname());
    }
    if (from.has_querystr()) {
      set_querystr(from.querystr());
    }
    if (from.has_debug()) {
      set_debug(from.debug());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_combiner()) {
      mutable_combiner()->::IndexQuery_Combiner::MergeFrom(from.combiner());
    }
    if (from.has_ranker()) {
      mutable_ranker()->::IndexQuery_Ranker::MergeFrom(from.ranker());
    }
    if (from.has_indexweight()) {
      set_indexweight(from.indexweight());
    }
    if (from.has_geo_anchor()) {
      mutable_geo_anchor()->::IndexQuery_GeoAnchor::MergeFrom(from.geo_anchor());
    }
    if (from.has_limit_attr()) {
      set_limit_attr(from.limit_attr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndexQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexQuery::CopyFrom(const IndexQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->filterlist())) return false;
  if (has_combiner()) {
    if (!this->combiner().IsInitialized()) return false;
  }
  if (has_ranker()) {
    if (!this->ranker().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->fieldweightlist())) return false;
  if (has_geo_anchor()) {
    if (!this->geo_anchor().IsInitialized()) return false;
  }
  return true;
}

void IndexQuery::Swap(IndexQuery* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(qid_, other->qid_);
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(indexname_, other->indexname_);
    std::swap(querystr_, other->querystr_);
    std::swap(debug_, other->debug_);
    filterlist_.Swap(&other->filterlist_);
    std::swap(combiner_, other->combiner_);
    std::swap(ranker_, other->ranker_);
    selectattrlist_.Swap(&other->selectattrlist_);
    std::swap(indexweight_, other->indexweight_);
    fieldweightlist_.Swap(&other->fieldweightlist_);
    std::swap(geo_anchor_, other->geo_anchor_);
    std::swap(limit_attr_, other->limit_attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndexQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexQuery_descriptor_;
  metadata.reflection = IndexQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndexQueryReq::kQueryFieldNumber;
const int IndexQueryReq::kQueryAnalysisInfoFieldNumber;
const int IndexQueryReq::kExinfoFieldNumber;
#endif  // !_MSC_VER

IndexQueryReq::IndexQueryReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndexQueryReq)
}

void IndexQueryReq::InitAsDefaultInstance() {
  query_ = const_cast< ::IndexQuery*>(&::IndexQuery::default_instance());
}

IndexQueryReq::IndexQueryReq(const IndexQueryReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IndexQueryReq)
}

void IndexQueryReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  query_ = NULL;
  queryanalysisinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexQueryReq::~IndexQueryReq() {
  // @@protoc_insertion_point(destructor:IndexQueryReq)
  SharedDtor();
}

void IndexQueryReq::SharedDtor() {
  if (queryanalysisinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete queryanalysisinfo_;
  }
  if (this != default_instance_) {
    delete query_;
  }
}

void IndexQueryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexQueryReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexQueryReq_descriptor_;
}

const IndexQueryReq& IndexQueryReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bs_2eproto();
  return *default_instance_;
}

IndexQueryReq* IndexQueryReq::default_instance_ = NULL;

IndexQueryReq* IndexQueryReq::New() const {
  return new IndexQueryReq;
}

void IndexQueryReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_query()) {
      if (query_ != NULL) query_->::IndexQuery::Clear();
    }
    if (has_queryanalysisinfo()) {
      if (queryanalysisinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        queryanalysisinfo_->clear();
      }
    }
  }
  exinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndexQueryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndexQueryReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IndexQuery query = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_QueryAnalysisInfo;
        break;
      }

      // optional string QueryAnalysisInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_QueryAnalysisInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queryanalysisinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->queryanalysisinfo().data(), this->queryanalysisinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "queryanalysisinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_exinfo;
        break;
      }

      // repeated .MapStruct exinfo = 100;
      case 100: {
        if (tag == 802) {
         parse_exinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_exinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndexQueryReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndexQueryReq)
  return false;
#undef DO_
}

void IndexQueryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndexQueryReq)
  // required .IndexQuery query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->query(), output);
  }

  // optional string QueryAnalysisInfo = 2;
  if (has_queryanalysisinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queryanalysisinfo().data(), this->queryanalysisinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "queryanalysisinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->queryanalysisinfo(), output);
  }

  // repeated .MapStruct exinfo = 100;
  for (int i = 0; i < this->exinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->exinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndexQueryReq)
}

::google::protobuf::uint8* IndexQueryReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndexQueryReq)
  // required .IndexQuery query = 1;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->query(), target);
  }

  // optional string QueryAnalysisInfo = 2;
  if (has_queryanalysisinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queryanalysisinfo().data(), this->queryanalysisinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "queryanalysisinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->queryanalysisinfo(), target);
  }

  // repeated .MapStruct exinfo = 100;
  for (int i = 0; i < this->exinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->exinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndexQueryReq)
  return target;
}

int IndexQueryReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IndexQuery query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query());
    }

    // optional string QueryAnalysisInfo = 2;
    if (has_queryanalysisinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queryanalysisinfo());
    }

  }
  // repeated .MapStruct exinfo = 100;
  total_size += 2 * this->exinfo_size();
  for (int i = 0; i < this->exinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexQueryReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndexQueryReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndexQueryReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexQueryReq::MergeFrom(const IndexQueryReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  exinfo_.MergeFrom(from.exinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query()) {
      mutable_query()->::IndexQuery::MergeFrom(from.query());
    }
    if (from.has_queryanalysisinfo()) {
      set_queryanalysisinfo(from.queryanalysisinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndexQueryReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexQueryReq::CopyFrom(const IndexQueryReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexQueryReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_query()) {
    if (!this->query().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->exinfo())) return false;
  return true;
}

void IndexQueryReq::Swap(IndexQueryReq* other) {
  if (other != this) {
    std::swap(query_, other->query_);
    std::swap(queryanalysisinfo_, other->queryanalysisinfo_);
    exinfo_.Swap(&other->exinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndexQueryReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexQueryReq_descriptor_;
  metadata.reflection = IndexQueryReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryResult_AttrMeta::kTypeFieldNumber;
const int QueryResult_AttrMeta::kNameFieldNumber;
#endif  // !_MSC_VER

QueryResult_AttrMeta::QueryResult_AttrMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QueryResult.AttrMeta)
}

void QueryResult_AttrMeta::InitAsDefaultInstance() {
}

QueryResult_AttrMeta::QueryResult_AttrMeta(const QueryResult_AttrMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QueryResult.AttrMeta)
}

void QueryResult_AttrMeta::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResult_AttrMeta::~QueryResult_AttrMeta() {
  // @@protoc_insertion_point(destructor:QueryResult.AttrMeta)
  SharedDtor();
}

void QueryResult_AttrMeta::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void QueryResult_AttrMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResult_AttrMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResult_AttrMeta_descriptor_;
}

const QueryResult_AttrMeta& QueryResult_AttrMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bs_2eproto();
  return *default_instance_;
}

QueryResult_AttrMeta* QueryResult_AttrMeta::default_instance_ = NULL;

QueryResult_AttrMeta* QueryResult_AttrMeta::New() const {
  return new QueryResult_AttrMeta;
}

void QueryResult_AttrMeta::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryResult_AttrMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QueryResult.AttrMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QueryResult.AttrMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QueryResult.AttrMeta)
  return false;
#undef DO_
}

void QueryResult_AttrMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QueryResult.AttrMeta)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QueryResult.AttrMeta)
}

::google::protobuf::uint8* QueryResult_AttrMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QueryResult.AttrMeta)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QueryResult.AttrMeta)
  return target;
}

int QueryResult_AttrMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResult_AttrMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryResult_AttrMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryResult_AttrMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryResult_AttrMeta::MergeFrom(const QueryResult_AttrMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryResult_AttrMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult_AttrMeta::CopyFrom(const QueryResult_AttrMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult_AttrMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void QueryResult_AttrMeta::Swap(QueryResult_AttrMeta* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryResult_AttrMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResult_AttrMeta_descriptor_;
  metadata.reflection = QueryResult_AttrMeta_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QueryResult_Record::kIdFieldNumber;
const int QueryResult_Record::kAttrdataFieldNumber;
const int QueryResult_Record::kUserdataFieldNumber;
const int QueryResult_Record::kWeightFieldNumber;
#endif  // !_MSC_VER

QueryResult_Record::QueryResult_Record()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QueryResult.Record)
}

void QueryResult_Record::InitAsDefaultInstance() {
}

QueryResult_Record::QueryResult_Record(const QueryResult_Record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QueryResult.Record)
}

void QueryResult_Record::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  attrdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResult_Record::~QueryResult_Record() {
  // @@protoc_insertion_point(destructor:QueryResult.Record)
  SharedDtor();
}

void QueryResult_Record::SharedDtor() {
  if (attrdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attrdata_;
  }
  if (userdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userdata_;
  }
  if (this != default_instance_) {
  }
}

void QueryResult_Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResult_Record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResult_Record_descriptor_;
}

const QueryResult_Record& QueryResult_Record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bs_2eproto();
  return *default_instance_;
}

QueryResult_Record* QueryResult_Record::default_instance_ = NULL;

QueryResult_Record* QueryResult_Record::New() const {
  return new QueryResult_Record;
}

void QueryResult_Record::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_attrdata()) {
      if (attrdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attrdata_->clear();
      }
    }
    if (has_userdata()) {
      if (userdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userdata_->clear();
      }
    }
    weight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryResult_Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QueryResult.Record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attrdata;
        break;
      }

      // optional bytes attrdata = 2;
      case 2: {
        if (tag == 18) {
         parse_attrdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attrdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userdata;
        break;
      }

      // optional bytes userdata = 3;
      case 3: {
        if (tag == 26) {
         parse_userdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_weight;
        break;
      }

      // optional float weight = 4;
      case 4: {
        if (tag == 37) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QueryResult.Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QueryResult.Record)
  return false;
#undef DO_
}

void QueryResult_Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QueryResult.Record)
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional bytes attrdata = 2;
  if (has_attrdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->attrdata(), output);
  }

  // optional bytes userdata = 3;
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->userdata(), output);
  }

  // optional float weight = 4;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QueryResult.Record)
}

::google::protobuf::uint8* QueryResult_Record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QueryResult.Record)
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional bytes attrdata = 2;
  if (has_attrdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->attrdata(), target);
  }

  // optional bytes userdata = 3;
  if (has_userdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->userdata(), target);
  }

  // optional float weight = 4;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QueryResult.Record)
  return target;
}

int QueryResult_Record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional bytes attrdata = 2;
    if (has_attrdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attrdata());
    }

    // optional bytes userdata = 3;
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userdata());
    }

    // optional float weight = 4;
    if (has_weight()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResult_Record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryResult_Record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryResult_Record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryResult_Record::MergeFrom(const QueryResult_Record& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_attrdata()) {
      set_attrdata(from.attrdata());
    }
    if (from.has_userdata()) {
      set_userdata(from.userdata());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryResult_Record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult_Record::CopyFrom(const QueryResult_Record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult_Record::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QueryResult_Record::Swap(QueryResult_Record* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(attrdata_, other->attrdata_);
    std::swap(userdata_, other->userdata_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryResult_Record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResult_Record_descriptor_;
  metadata.reflection = QueryResult_Record_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QueryResult::kStatusFieldNumber;
const int QueryResult::kQidFieldNumber;
const int QueryResult::kTagFieldNumber;
const int QueryResult::kAttrmetalistFieldNumber;
const int QueryResult::kRecordlistFieldNumber;
#endif  // !_MSC_VER

QueryResult::QueryResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QueryResult)
}

void QueryResult::InitAsDefaultInstance() {
}

QueryResult::QueryResult(const QueryResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QueryResult)
}

void QueryResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0u;
  qid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResult::~QueryResult() {
  // @@protoc_insertion_point(destructor:QueryResult)
  SharedDtor();
}

void QueryResult::SharedDtor() {
  if (qid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qid_;
  }
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (this != default_instance_) {
  }
}

void QueryResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResult_descriptor_;
}

const QueryResult& QueryResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bs_2eproto();
  return *default_instance_;
}

QueryResult* QueryResult::default_instance_ = NULL;

QueryResult* QueryResult::New() const {
  return new QueryResult;
}

void QueryResult::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    status_ = 0u;
    if (has_qid()) {
      if (qid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        qid_->clear();
      }
    }
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_->clear();
      }
    }
  }
  attrmetalist_.Clear();
  recordlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QueryResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_qid;
        break;
      }

      // required string qid = 2;
      case 2: {
        if (tag == 18) {
         parse_qid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qid().data(), this->qid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tag;
        break;
      }

      // optional string tag = 3;
      case 3: {
        if (tag == 26) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attrmetalist;
        break;
      }

      // repeated .QueryResult.AttrMeta attrmetalist = 4;
      case 4: {
        if (tag == 34) {
         parse_attrmetalist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrmetalist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attrmetalist;
        if (input->ExpectTag(42)) goto parse_recordlist;
        break;
      }

      // repeated .QueryResult.Record recordlist = 5;
      case 5: {
        if (tag == 42) {
         parse_recordlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_recordlist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QueryResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QueryResult)
  return false;
#undef DO_
}

void QueryResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QueryResult)
  // required uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // required string qid = 2;
  if (has_qid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qid().data(), this->qid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->qid(), output);
  }

  // optional string tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tag(), output);
  }

  // repeated .QueryResult.AttrMeta attrmetalist = 4;
  for (int i = 0; i < this->attrmetalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attrmetalist(i), output);
  }

  // repeated .QueryResult.Record recordlist = 5;
  for (int i = 0; i < this->recordlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->recordlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QueryResult)
}

::google::protobuf::uint8* QueryResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QueryResult)
  // required uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // required string qid = 2;
  if (has_qid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qid().data(), this->qid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->qid(), target);
  }

  // optional string tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tag(), target);
  }

  // repeated .QueryResult.AttrMeta attrmetalist = 4;
  for (int i = 0; i < this->attrmetalist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attrmetalist(i), target);
  }

  // repeated .QueryResult.Record recordlist = 5;
  for (int i = 0; i < this->recordlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->recordlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QueryResult)
  return target;
}

int QueryResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required string qid = 2;
    if (has_qid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qid());
    }

    // optional string tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

  }
  // repeated .QueryResult.AttrMeta attrmetalist = 4;
  total_size += 1 * this->attrmetalist_size();
  for (int i = 0; i < this->attrmetalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrmetalist(i));
  }

  // repeated .QueryResult.Record recordlist = 5;
  total_size += 1 * this->recordlist_size();
  for (int i = 0; i < this->recordlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryResult::MergeFrom(const QueryResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrmetalist_.MergeFrom(from.attrmetalist_);
  recordlist_.MergeFrom(from.recordlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_qid()) {
      set_qid(from.qid());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult::CopyFrom(const QueryResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->attrmetalist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->recordlist())) return false;
  return true;
}

void QueryResult::Swap(QueryResult* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(qid_, other->qid_);
    std::swap(tag_, other->tag_);
    attrmetalist_.Swap(&other->attrmetalist_);
    recordlist_.Swap(&other->recordlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResult_descriptor_;
  metadata.reflection = QueryResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndexDebugInfo::kHostFieldNumber;
const int IndexDebugInfo::kCostFieldNumber;
const int IndexDebugInfo::kQuerystrFieldNumber;
#endif  // !_MSC_VER

IndexDebugInfo::IndexDebugInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndexDebugInfo)
}

void IndexDebugInfo::InitAsDefaultInstance() {
}

IndexDebugInfo::IndexDebugInfo(const IndexDebugInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IndexDebugInfo)
}

void IndexDebugInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cost_ = GOOGLE_ULONGLONG(0);
  querystr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexDebugInfo::~IndexDebugInfo() {
  // @@protoc_insertion_point(destructor:IndexDebugInfo)
  SharedDtor();
}

void IndexDebugInfo::SharedDtor() {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_;
  }
  if (querystr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete querystr_;
  }
  if (this != default_instance_) {
  }
}

void IndexDebugInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexDebugInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexDebugInfo_descriptor_;
}

const IndexDebugInfo& IndexDebugInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bs_2eproto();
  return *default_instance_;
}

IndexDebugInfo* IndexDebugInfo::default_instance_ = NULL;

IndexDebugInfo* IndexDebugInfo::New() const {
  return new IndexDebugInfo;
}

void IndexDebugInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        host_->clear();
      }
    }
    cost_ = GOOGLE_ULONGLONG(0);
    if (has_querystr()) {
      if (querystr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        querystr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndexDebugInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndexDebugInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cost;
        break;
      }

      // optional uint64 cost = 2;
      case 2: {
        if (tag == 16) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_querystr;
        break;
      }

      // optional bytes querystr = 3;
      case 3: {
        if (tag == 26) {
         parse_querystr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_querystr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndexDebugInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndexDebugInfo)
  return false;
#undef DO_
}

void IndexDebugInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndexDebugInfo)
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // optional uint64 cost = 2;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cost(), output);
  }

  // optional bytes querystr = 3;
  if (has_querystr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->querystr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndexDebugInfo)
}

::google::protobuf::uint8* IndexDebugInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndexDebugInfo)
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // optional uint64 cost = 2;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cost(), target);
  }

  // optional bytes querystr = 3;
  if (has_querystr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->querystr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndexDebugInfo)
  return target;
}

int IndexDebugInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional uint64 cost = 2;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cost());
    }

    // optional bytes querystr = 3;
    if (has_querystr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->querystr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexDebugInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndexDebugInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndexDebugInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexDebugInfo::MergeFrom(const IndexDebugInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_querystr()) {
      set_querystr(from.querystr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndexDebugInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexDebugInfo::CopyFrom(const IndexDebugInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexDebugInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IndexDebugInfo::Swap(IndexDebugInfo* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(cost_, other->cost_);
    std::swap(querystr_, other->querystr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndexDebugInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexDebugInfo_descriptor_;
  metadata.reflection = IndexDebugInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndexQueryRes::kResultFieldNumber;
const int IndexQueryRes::kDebuginfoFieldNumber;
const int IndexQueryRes::kExinfoFieldNumber;
#endif  // !_MSC_VER

IndexQueryRes::IndexQueryRes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndexQueryRes)
}

void IndexQueryRes::InitAsDefaultInstance() {
  result_ = const_cast< ::QueryResult*>(&::QueryResult::default_instance());
  debuginfo_ = const_cast< ::IndexDebugInfo*>(&::IndexDebugInfo::default_instance());
}

IndexQueryRes::IndexQueryRes(const IndexQueryRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IndexQueryRes)
}

void IndexQueryRes::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  debuginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexQueryRes::~IndexQueryRes() {
  // @@protoc_insertion_point(destructor:IndexQueryRes)
  SharedDtor();
}

void IndexQueryRes::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
    delete debuginfo_;
  }
}

void IndexQueryRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexQueryRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexQueryRes_descriptor_;
}

const IndexQueryRes& IndexQueryRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bs_2eproto();
  return *default_instance_;
}

IndexQueryRes* IndexQueryRes::default_instance_ = NULL;

IndexQueryRes* IndexQueryRes::New() const {
  return new IndexQueryRes;
}

void IndexQueryRes::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::QueryResult::Clear();
    }
    if (has_debuginfo()) {
      if (debuginfo_ != NULL) debuginfo_->::IndexDebugInfo::Clear();
    }
  }
  exinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndexQueryRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndexQueryRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QueryResult result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_debuginfo;
        break;
      }

      // optional .IndexDebugInfo debuginfo = 2;
      case 2: {
        if (tag == 18) {
         parse_debuginfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debuginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_exinfo;
        break;
      }

      // repeated .MapStruct exinfo = 100;
      case 100: {
        if (tag == 802) {
         parse_exinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_exinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndexQueryRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndexQueryRes)
  return false;
#undef DO_
}

void IndexQueryRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndexQueryRes)
  // required .QueryResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional .IndexDebugInfo debuginfo = 2;
  if (has_debuginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->debuginfo(), output);
  }

  // repeated .MapStruct exinfo = 100;
  for (int i = 0; i < this->exinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->exinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndexQueryRes)
}

::google::protobuf::uint8* IndexQueryRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndexQueryRes)
  // required .QueryResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional .IndexDebugInfo debuginfo = 2;
  if (has_debuginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->debuginfo(), target);
  }

  // repeated .MapStruct exinfo = 100;
  for (int i = 0; i < this->exinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->exinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndexQueryRes)
  return target;
}

int IndexQueryRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QueryResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional .IndexDebugInfo debuginfo = 2;
    if (has_debuginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->debuginfo());
    }

  }
  // repeated .MapStruct exinfo = 100;
  total_size += 2 * this->exinfo_size();
  for (int i = 0; i < this->exinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexQueryRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndexQueryRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndexQueryRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexQueryRes::MergeFrom(const IndexQueryRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  exinfo_.MergeFrom(from.exinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::QueryResult::MergeFrom(from.result());
    }
    if (from.has_debuginfo()) {
      mutable_debuginfo()->::IndexDebugInfo::MergeFrom(from.debuginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndexQueryRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexQueryRes::CopyFrom(const IndexQueryRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexQueryRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  if (has_debuginfo()) {
    if (!this->debuginfo().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->exinfo())) return false;
  return true;
}

void IndexQueryRes::Swap(IndexQueryRes* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(debuginfo_, other->debuginfo_);
    exinfo_.Swap(&other->exinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndexQueryRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexQueryRes_descriptor_;
  metadata.reflection = IndexQueryRes_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
